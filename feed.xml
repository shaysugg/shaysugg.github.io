<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://shaysugg.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://shaysugg.github.io//" rel="alternate" type="text/html" /><updated>2024-04-15T16:25:25+03:30</updated><id>https://shaysugg.github.io//feed.xml</id><title type="html">devbashayan</title><subtitle>Hi and welcome! My name is Shayan and I&apos;m a software developer, Mostly develop apps and tools for iOS and macOS. </subtitle><author><name>Riccardo Graziosi</name></author><entry><title type="html">Download Manager - URLSession and Swift Modern Concurrency - Part 1</title><link href="https://shaysugg.github.io//2024/04/06/DownloadManager1.html" rel="alternate" type="text/html" title="Download Manager - URLSession and Swift Modern Concurrency - Part 1" /><published>2024-04-06T00:00:00+03:30</published><updated>2024-04-06T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/04/06/DownloadManager1</id><content type="html" xml:base="https://shaysugg.github.io//2024/04/06/DownloadManager1.html"><![CDATA[<p>Apparently URLSession used to be so difficult to work with. Many people preferred using third-party network tools like <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> or <a href="https://github.com/Alamofire/Alamofire">Alamofire</a>. However over the past years it has its improvements. Two of its notable improvements can be the Combine and <code class="language-plaintext highlighter-rouge">async await</code> equivalent APIs. They replace the closure based APIs which can become error prone in advance usages. After all, nobody wants to deal with those nested closures inside each others.
Despite the improvements, I faced a few challenges while building a download manager class with a modern async await APIs in mind. Initially, I came up with something like this:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DownloadManager</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">downloadSession</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="o">.</span><span class="n">shared</span>

  <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="k">async</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">URL</span> <span class="p">{</span>
    <span class="k">let</span> <span class="p">(</span><span class="nv">url</span><span class="p">,</span> <span class="nv">_</span><span class="p">)</span> <span class="o">=</span> <span class="k">try</span> <span class="n">downloadSession</span><span class="o">.</span><span class="nf">download</span><span class="p">(</span>
      <span class="nv">for</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">url</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This is totally fine for simple use cases, But most of the times specially for big files we want to track the download progress. Either for our logging and diagnostics or displaying the progress to the user.</p>
<h2 id="getting-the-download-progress">Getting the download progress</h2>
<p>Of course I had to use delegates. sigh. This <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code> method</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didWriteData</span> <span class="nv">bytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesExpectedToWrite</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">)</span>
</code></pre></div></div>
<p>Consequently, I changed my download manager from a struct to a class because It needed to inherit from <code class="language-plaintext highlighter-rouge">NSObject</code> to be able to conform to <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code>. Additionally I assigned the <code class="language-plaintext highlighter-rouge">DownloadManager</code> class as my download session delegate.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
  <span class="kd">lazy</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">downloadSession</span><span class="p">:</span> <span class="kt">URLSession</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">session</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="p">(</span>
      <span class="nv">configuration</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">,</span>
      <span class="nv">delegate</span><span class="p">:</span> <span class="n">downloadDelegate</span><span class="p">,</span>
      <span class="nv">delegateQueue</span><span class="p">:</span> <span class="kc">nil</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">session</span>
	<span class="p">}()</span>

	<span class="c1">//...</span>

	<span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didWriteData</span> <span class="nv">bytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesExpectedToWrite</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">//progress can be found here!</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Also, note that <mark>when you assign a delegate to your URLSession configuration, all the completion handlers of your data tasks no longer work</mark>. You have to use <code class="language-plaintext highlighter-rouge">downloadTask(with: URLRequest(url: url))</code> in order to be able to track the download progress. This <em>unfortunately</em> also means that you have to find if the download was successful or not within those delegate methods.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
	<span class="c1">// ....</span>
	
  <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// this won't report the progress </span>
    <span class="k">let</span> <span class="p">(</span><span class="nv">url</span><span class="p">,</span> <span class="nv">_</span><span class="p">)</span> <span class="o">=</span> <span class="k">try</span> <span class="n">downloadSession</span><span class="o">.</span><span class="nf">download</span><span class="p">(</span>
    <span class="nv">for</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="c1">// instead have to use this</span>
    <span class="n">downloadSession</span><span class="o">.</span><span class="nf">downloadTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="c1">// this function is not async anymore</span>
    <span class="c1">// i can't simply return the downloaded url from here</span>
    <span class="c1">// :(</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didFinishDownloadingTo</span> <span class="nv">location</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//figure out the download location belongs to which download task</span>
    <span class="c1">//by probably checking the task id?</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">task</span><span class="p">:</span> <span class="kt">URLSessionTask</span><span class="p">,</span> <span class="n">didCompleteWithError</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">?)</span> <span class="p">{</span>
    <span class="c1">//same id checking for figuring out download errors</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Well that certainly bring back bitter nostalgia and instantly throw me out of our beautiful async await world. Our beloved <code class="language-plaintext highlighter-rouge">func download(from url: URL) async throws -&gt; URL</code> <strong>pure function</strong> is gone. So how do I to report the downloading progress to the others that are using my <code class="language-plaintext highlighter-rouge">DownloadManager</code>? By defining my own custom delegates? Wouldn’t it be nice to return an <em>iteration that others can listen to and receive the progress update events asynchronously</em>?</p>
<h2 id="async-await-adaptor">async await Adaptor</h2>
<p>Well, asynchronous iteration! This is certeinly a use case for <code class="language-plaintext highlighter-rouge">AsyncStream</code> but sometimes we may only be interested in the final download result. So I decided to define a specific type for my download operation and return that back.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">progressSubjects</span> <span class="o">=</span> <span class="kt">CurrentValueSubject</span><span class="o">&lt;</span><span class="kt">Double</span><span class="p">,</span> <span class="kt">Never</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">resultsSubjects</span> <span class="o">=</span> <span class="kt">PassthroughSubject</span><span class="o">&lt;</span><span class="kt">URL</span><span class="p">,</span> <span class="kt">Error</span><span class="o">&gt;</span><span class="p">()</span>

  <span class="k">var</span> <span class="nv">progressPublisher</span><span class="p">:</span> <span class="kt">AsyncThrowingPublisher</span><span class="o">&lt;</span><span class="kt">AnyPublisher</span><span class="o">&lt;</span><span class="kt">Double</span><span class="p">,</span> <span class="kt">Never</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="n">progressSubjects</span><span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">()</span><span class="o">.</span><span class="n">values</span>
  <span class="p">}</span>
	
  <span class="kd">func</span> <span class="nf">result</span><span class="p">()</span> <span class="k">async</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">URL</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">for</span> <span class="k">try</span> <span class="k">await</span> <span class="n">result</span> <span class="k">in</span> <span class="n">resultsSubjects</span><span class="o">.</span><span class="n">values</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">result</span>
    <span class="p">}</span>
    <span class="nf">preconditionFailure</span><span class="p">(</span><span class="s">"Should finish with at least one value"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>I identified each download task with an ID and stored download tasks with their ids in a dictionary within my <code class="language-plaintext highlighter-rouge">DownloadManager</code>. For progress changes or download completions and failures I search for the corresponding download task in this dictionary and update it it to reflect those changes.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">typealias</span> <span class="kt">DownloadTaskID</span> <span class="o">=</span> <span class="kt">Int</span>

<span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">downloads</span><span class="p">:</span> <span class="p">[</span><span class="kt">DownloadTaskID</span><span class="p">:</span> <span class="kt">DownloadTask</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
	
  <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
    <span class="c1">//create a download task and store it and then start the task</span>
    <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="n">downloadSession</span><span class="o">.</span><span class="nf">downloadTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">URLReque</span>    <span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="n">downloads</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DownloadTask</span><span class="p">()</span>
    <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">downloadTask</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>I used <code class="language-plaintext highlighter-rouge">Combine</code> subjects for progress and completion handlers, along with some helper methods for sending the correct events to those subjects.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">finish</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">progressSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">completion</span><span class="p">:</span> <span class="o">.</span><span class="n">finished</span><span class="p">)</span>
    <span class="n">resultsSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">resultsSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">completion</span><span class="p">:</span> <span class="o">.</span><span class="n">finished</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">finish</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">progressSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">completion</span><span class="p">:</span> <span class="o">.</span><span class="n">finished</span><span class="p">)</span>
    <span class="n">resultsSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">completion</span><span class="p">:</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">setProgress</span><span class="p">(</span><span class="n">_</span> <span class="nv">progress</span><span class="p">:</span> <span class="kt">Double</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">progressSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="n">progress</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Note that I didn’t expose any combine APIs externally, so the users of our class don’t have to import it. This makes it easier to use our code across multiple codebases.</p>

<p>Here is the implementation of our <code class="language-plaintext highlighter-rouge">DownloadManager</code> so far</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">downloads</span><span class="p">:</span> <span class="p">[</span><span class="kt">DownloadTaskID</span><span class="p">:</span> <span class="kt">DownloadTask</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
	
  <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="n">downloadSession</span><span class="o">.</span><span class="nf">downloadTask</span><span class="p">(</span>
		<span class="nv">with</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="n">downloads</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DownloadTask</span><span class="p">()</span>
    <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">downloadTask</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didWriteData</span> <span class="nv">bytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesExpectedToWrite</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//find the download task and updqate the progress</span>
    <span class="k">let</span> <span class="nv">progress</span> <span class="o">=</span> <span class="kt">Double</span><span class="p">(</span><span class="n">totalBytesWritten</span><span class="p">)</span> <span class="o">/</span> <span class="kt">Doub</span>    <span class="p">(</span><span class="n">totalBytesExpectedToWrite</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">download</span> <span class="o">=</span> <span class="n">downloads</span><span class="p">[</span><span class="n">downloadTask</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span>
    <span class="n">download</span><span class="p">?</span><span class="o">.</span><span class="nf">setProgress</span><span class="p">(</span><span class="n">progress</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didFinishDownloadingTo</span> <span class="nv">location</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//find the download task and finish it with success</span>
    <span class="k">let</span> <span class="nv">download</span> <span class="o">=</span> <span class="n">downloads</span><span class="p">[</span><span class="n">downloadTask</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">destLocation</span> <span class="o">=</span> <span class="k">try!</span> <span class="nf">moveToDownloads</span><span class="p">(</span><span class="nv">fileURL</span><span class="p">:</span> <span class="n">location</span><span class="p">)</span>
    <span class="n">download</span><span class="p">?</span><span class="o">.</span><span class="nf">finish</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">destLocation</span><span class="p">)</span>
    <span class="n">downloads</span><span class="o">.</span><span class="nf">removeValue</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="n">downloadTask</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">task</span><span class="p">:</span> <span class="kt">URLSessionTask</span><span class="p">,</span> <span class="n">didCompleteWithError</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">?)</span> <span class="p">{</span>
    <span class="c1">//find the download task and finish it with failure</span>
    <span class="k">let</span> <span class="nv">download</span> <span class="o">=</span> <span class="n">downloads</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span>
    <span class="n">download</span><span class="p">?</span><span class="o">.</span><span class="nf">finish</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span>
    <span class="n">downloads</span><span class="o">.</span><span class="nf">removeValue</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>And here is an example of its usage</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">downloadSomething</span><span class="p">(</span><span class="k">for</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">DownloadTask</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">downloadTask</span> <span class="o">=</span> <span class="k">await</span> <span class="n">fileDownloader</span><span class="o">.</span><span class="nf">download</span><span class="p">(</span>
    <span class="nv">from</span><span class="p">:</span> <span class="n">somethingURL</span><span class="p">)</span>
  <span class="kt">Task</span> <span class="p">{</span>
    <span class="k">for</span> <span class="k">try</span> <span class="k">await</span> <span class="n">progress</span> <span class="k">in</span> <span class="n">downloadTask</span><span class="o">.</span><span class="n">progressPublisher</span> <span class="p">{</span>
      <span class="c1">//here you have the download progress</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kt">Task</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">downloadedURL</span> <span class="o">=</span> <span class="k">try</span> <span class="k">await</span> <span class="n">downloadTask</span><span class="o">.</span><span class="nf">result</span><span class="p">()</span>
    <span class="c1">//here you have the download result</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>But we’re not finished yet! I will explain the rest of it in the two upcoming articles. In the next article I will explain how we can <strong>cancel and resume</strong> downloads.
If you’re bored with all of this implementation details and want to instantly jump and take a look at the final code, I’ve uploaded it on <a href="https://gist.github.com/shaysugg/8def3de858038eccf1ab2860424336e0">Gist</a>.</p>

<p>Thank you for reading,</p>

<p>Cheers!</p>]]></content><author><name>Riccardo Graziosi</name></author><summary type="html"><![CDATA[Apparently URLSession used to be so difficult to work with. Many people preferred using third-party network tools like AFNetworking or Alamofire. However over the past years it has its improvements. Two of its notable improvements can be the Combine and async await equivalent APIs. They replace the closure based APIs which can become error prone in advance usages. After all, nobody wants to deal with those nested closures inside each others. Despite the improvements, I faced a few challenges while building a download manager class with a modern async await APIs in mind. Initially, I came up with something like this: ```swift struct DownloadManager { let downloadSession = URLSession.shared]]></summary></entry><entry><title type="html">Just a hello world</title><link href="https://shaysugg.github.io//2024/04/04/HelloWorld.html" rel="alternate" type="text/html" title="Just a hello world" /><published>2024-04-04T00:00:00+03:30</published><updated>2024-04-04T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/04/04/HelloWorld</id><content type="html" xml:base="https://shaysugg.github.io//2024/04/04/HelloWorld.html"><![CDATA[<p>So here is the first post of this blog. Over the past few years I have had the opportunity to learn programming on my own which has led to woking in multiple startups and a big company. Well, I was quite busy with work all these times. Except doing some hobbies which were necessary to prevent burnouts I haven’t done much else.
During these times I’ve came across good blogs, RSS feeds and good dev communities. They have not only helped me learn and solve the problems I encounter at work and in my personal projects, but have also showed me how much developers are eager to share knowledge and collaborate with each other.</p>

<p>Additionally I realized there is a second group of developers to which I belong. The silent developers. We don’t share anything,  don’t contribute to any open-source projects and don’t answer any stack-overflow questions. Honestly there is nothing wrong about it. People are generally too busy with their daily life and knowledge sharing is usually time consuming. However, day by day as I spend more time in this field I come across interesting topics and ideas that I believe are worth sharing with other people.</p>

<p>I am aware of the fact that I’m probably not a good teacher or mentor. I don’t have much experience in software development (4 years?). I’m not even good at writing things and also english is not my first language. I don’t aim to create a well design and continuously updated tech blog, I simply need a place to comfortably write about interesting technical topics occasionally.
I will write about some of the things that I’ve crafted and built over the past years, mostly based on Swift and iOS development. Additionally I may write about my personal thoughts and opinions about technical topics.</p>

<p><em>Upcoming: An article about a small and modern <code class="language-plaintext highlighter-rouge">DownloadManager</code> based on <code class="language-plaintext highlighter-rouge">URLSession</code> that I developed last year and have actually used in several project.</em></p>]]></content><author><name>Riccardo Graziosi</name></author><summary type="html"><![CDATA[So here is the first post of this blog. Over the past few years I have had the opportunity to learn programming on my own which has led to woking in multiple startups and a big company. Well, I was quite busy with work all these times. Except doing some hobbies which were necessary to prevent burnouts I haven’t done much else. During these times I’ve came across good blogs, RSS feeds and good dev communities. They have not only helped me learn and solve the problems I encounter at work and in my personal projects, but have also showed me how much developers are eager to share knowledge and collaborate with each other.]]></summary></entry></feed>