<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://shaysugg.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://shaysugg.github.io//" rel="alternate" type="text/html" /><updated>2024-11-26T12:13:08+03:30</updated><id>https://shaysugg.github.io//feed.xml</id><title type="html">devbashayan</title><subtitle>Hi and welcome! My name is Shayan and I&apos;m a software developer, Mostly develop apps and tools for iOS and macOS. </subtitle><author><name>Riccardo Graziosi</name></author><entry><title type="html">Three analytics problem</title><link href="https://shaysugg.github.io//2024/09/15/ThreeAnalyticsProblem.html" rel="alternate" type="text/html" title="Three analytics problem" /><published>2024-09-15T00:00:00+03:30</published><updated>2024-09-15T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/09/15/ThreeAnalyticsProblem</id><content type="html" xml:base="https://shaysugg.github.io//2024/09/15/ThreeAnalyticsProblem.html"><![CDATA[<p>User accusation can be hard, especially if you’re in a small team or if you’re on your own. Often you find yourself worrying why you are not getting enough users. Why users are churning your app. Gathering information about users and their behaviors can be a good starting point, but there is no guarantee that with more data you can address the challenges more appropriately.</p>

<p>This often introduces dilemmas and complexities, especially in management, data analysis, and growth aspects of your team regarding the strategies should be taken to gather these information. On the development side, the complexities can also be intense; Working with third-parties analytics platforms, each with their own convections, rapid changes in the tools and dependencies that being used and sometimes you want to combine multiple analytics tools to achieve your goals. The question becomes: How you can develop a resilient code that can more easily tolerate these changes?</p>

<p>I had to develop a multi-platform analytics system with three dependencies at work a while ago, and I developed a simple solution that I believe can be a good starting point for handling these cases.</p>
<h2 id="analytics-system-that-works-with-multiple-platforms">Analytics system that works with multiple platforms</h2>
<p>Okay, let’s say for an action that the user takes in your app you need to send several events to multiple platforms. Assuming you have a really rational base code, something like this</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">purchaseButtonTapped</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//some relevant action for purchasing</span>
<span class="p">}</span>
</code></pre></div></div>
<p>And unfortunately it will turn into</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">purchaseButtonTapped</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//some relevant action for purchasing</span>
 
  <span class="c1">//send and event to the platform A which requires an id:     string and a value: [string: Any]</span>

  <span class="c1">//send and event to the platform B which requires an id: string and a value: string</span>

  <span class="c1">//send and event to the platform C that has its own event object like;</span>
  <span class="c1">//let event = System3Event()</span>
  <span class="c1">//event.data = [purchaseID: Price]</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This can immediately make the code unreadable and introduce many unrelated logics. Since all of these platforms have their own convections, It’s possible to end up with event handling code that’s twice as much as your logic code. And what if suddenly you’re told to change one analytics platform to another with different convections. It’s pretty much obvious that you need to move this code somewhere else, plus, you need some abstractions there to handle all of these pervasive code.</p>
<h2 id="defining-events">Defining events</h2>
<p>Let’s start defining a protocol for all of our events</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">ReportableEvent</span> <span class="p">{}</span>
</code></pre></div></div>
<p>And as an example let’s define a purchase and signup event and conform them to <code class="language-plaintext highlighter-rouge">ReportableEvent</code>. Note that there would be no analytics platform convention here.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">SignUpEvent</span><span class="p">:</span> <span class="kt">ReportableEvent</span> <span class="p">{</span>
  <span class="kd">enum</span> <span class="kt">AuthenticationPlatform</span> <span class="p">{</span>
    <span class="c1">//...</span>
  <span class="p">}</span>
  <span class="k">let</span> <span class="nv">userID</span><span class="p">:</span> <span class="kt">String</span>
  <span class="k">let</span> <span class="nv">authenticationPlatform</span><span class="p">:</span> <span class="kt">AuthenticationPlatform</span>
<span class="p">}</span>

<span class="kd">struct</span> <span class="kt">PurchaseEvent</span><span class="p">:</span> <span class="kt">ReportableEvent</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">userID</span><span class="p">:</span> <span class="kt">String</span>
  <span class="k">let</span> <span class="nv">price</span><span class="p">:</span> <span class="kt">Double</span>
  <span class="k">let</span> <span class="nv">discount</span><span class="p">:</span> <span class="kt">Double</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Finally let’s define an event handler that accepts and handles all these events under ReportableEvent type. The main job of it is to encapsulate all of those analytics platforms’ codes and prevent it from spreading throughout our code.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">import</span> <span class="kt">AnalyticsPlatformA</span>
<span class="kd">import</span> <span class="kt">AnalyticsPlatformB</span>
<span class="c1">//... more analytics systems</span>

<span class="kd">struct</span> <span class="kt">EventHandler</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">analyticsPlatformA</span><span class="p">:</span> <span class="kt">AnalyticsPlatformA</span>
  <span class="k">let</span> <span class="nv">analyticsPlatformB</span><span class="p">:</span> <span class="kt">AnalyticsPlatformB</span>
  <span class="c1">//....</span>
  
  <span class="kd">func</span> <span class="nf">setup</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//here you set up analytics platforms dependencies</span>
  <span class="p">}</span>
  
  <span class="kd">func</span> <span class="nf">handleEvent</span><span class="p">(</span><span class="kd">some</span> <span class="kt">ReportableEvent</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// two main tasks here</span>
    <span class="c1">// create each analytics platform specific data</span>
    <span class="c1">// call analytics platform functions  </span>
    <span class="c1">// 🔴 seems a bit problematic, isn't it?</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="platforms-dedicated-events">Platforms dedicated events</h2>
<p>Well, currently there are two problems with our event handling system.</p>

<p>1) Events can have their own specific data, and the question is whether we should map that data to analytics platforms’ data in the <code class="language-plaintext highlighter-rouge">handleEvent</code> method?</p>

<p>2) Sometimes we only want to send certain events to the specific platforms. For example purchasing should be sent to analytics platform A and B but sign up event only needs to be sent to platformA.</p>

<p>While it’s possible to write if else statements with gigantic conditions that checks the all the possible events and decide their corresponding platform and required data, it is pretty obvious that it can’t be scaled.</p>

<p>Additionally, one other criteria for our event system is to keep the analytics platforms-related code in its own domain and separated from the definition of events.</p>

<p>With the above conditions in mind let’s define the platform compatibilities as protocols like;</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">protocol</span> <span class="kt">EventForAnalyticsPlatformA</span><span class="p">:</span> <span class="kt">ReportableEvent</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">platformAData</span><span class="p">:</span> <span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">])</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>

<span class="kd">protocol</span> <span class="kt">EventForAnalyticsPlatformB</span><span class="p">:</span> <span class="kt">ReportableEvent</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">platformBData</span><span class="p">:</span> <span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span> <span class="k">get</span> <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>And then extend our event definitions to conform to their corresponding platforms’ requirements;</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//we want to send SignUpEvent to AnalyticsPlatformA and AnalyticsPlatformB</span>
<span class="kd">extension</span> <span class="kt">SignUpEvent</span><span class="p">:</span> <span class="kt">EventForAnalyticsPlatformA</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">platformAData</span> <span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">])</span> <span class="p">{</span>
    <span class="c1">//...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">SignUpEvent</span><span class="p">:</span> <span class="kt">EventForAnalyticsPlatformB</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">platformBData</span><span class="p">:</span> <span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//...</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="c1">//we want to send purchase event only to AnalyticsPlatformB</span>
<span class="kd">struct</span> <span class="kt">PurchaseEvent</span><span class="p">:</span> <span class="kt">EventForAnalyticsPlatformB</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">platformBData</span><span class="p">:</span> <span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//...</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>As a result the <code class="language-plaintext highlighter-rouge">handleEvent</code> method of our event handler is going to have a simple implementation like;</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//let's assume our dependencies handle their events like</span>
<span class="kd">class</span> <span class="kt">AnalyticsPlatformA</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">handleEventWith</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="p">[</span><span class="kt">String</span><span class="p">:</span> <span class="kt">Any</span><span class="p">])</span> <span class="p">{</span> <span class="c1">//... }</span>
<span class="p">}</span>
<span class="kd">class</span> <span class="kt">AnalyticsPlatformA</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">event</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="kt">Int</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//... }</span>
<span class="p">}</span>

<span class="c1">//then the `handleEvent` of our event handler going to be like</span>
<span class="kd">struct</span> <span class="kt">EventHandler</span> <span class="p">{</span>
<span class="c1">//...</span>
<span class="kd">func</span> <span class="nf">handleEvent</span><span class="p">(</span><span class="kd">some</span> <span class="kt">ReportableEvent</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">switch</span> <span class="n">event</span> <span class="p">{</span>
    <span class="k">case</span> <span class="k">let</span> <span class="nv">event</span> <span class="k">as</span> <span class="kt">EventForAnalyticsPlatformA</span><span class="p">:</span>
      <span class="n">analyticsPlatformA</span><span class="o">.</span><span class="nf">handleEventWith</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="n">event</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">event</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
    <span class="k">case</span> <span class="k">let</span> <span class="nv">event</span> <span class="k">as</span> <span class="kt">EventForAnalyticsPlatformB</span><span class="p">:</span>
      <span class="n">analyticsPlatformB</span><span class="o">.</span><span class="nf">event</span><span class="p">(</span><span class="nv">id</span><span class="p">:</span> <span class="n">event</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">event</span><span class="o">.</span><span class="n">value</span><span class="p">)</span>
    <span class="k">default</span><span class="p">:</span>
      <span class="k">break</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Ultimately we end up with this nice modular structure</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-main application
  --events definations
    ---purchase event
    ---signup event
    ---...
-events handler
  --event handler
    --events +
      --purchase event + platformA
      --signup event + platformBA
      --signup event + platformB
    --dependencies
</code></pre></div></div>
<p>Note that right now we can easily put the event handler, the platform-related code of the events, and all the analytics third-party dependencies into its own package if we want to follow a more modular practices in our code.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Well, I hope this way of encapsulating analytics-related code can make working with our main code much easier and make our Data analysis colleagues happy. As always you can find me on <a href="https://github.com/shaysugg">Github</a> and <a href="&lt;https://www.linkedin.com/in/shayan-barghaman/">LinkedIn</a>.</p>

<p>Thanks for reading,
Cheers!</p>]]></content><author><name>Shayan B</name></author><summary type="html"><![CDATA[User accusation can be hard, especially if you’re in a small team or if you’re on your own. Often you find yourself worrying why you are not getting enough users. Why users are churning your app. Gathering information about users and their behaviors can be a good starting point, but there is no guarantee that with more data you can address the challenges more appropriately.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://shaysugg.github.io/" /><media:content medium="image" url="https://shaysugg.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Use Combine to implement a Github OAuth authenticator</title><link href="https://shaysugg.github.io//2024/07/23/GithubAuthenticatorWithCombine.html" rel="alternate" type="text/html" title="Use Combine to implement a Github OAuth authenticator" /><published>2024-07-23T00:00:00+03:30</published><updated>2024-07-23T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/07/23/GithubAuthenticatorWithCombine</id><content type="html" xml:base="https://shaysugg.github.io//2024/07/23/GithubAuthenticatorWithCombine.html"><![CDATA[<p>It’s been a couple of years since the introduction of async await in Swift and the debates between usage of Swift’s modern concurrency and combine to address asynchronous requirements have become quite controversial. While using async await is usually more readable and understandable, especially for developers with no prior experience in reactive programming (Can’t truly say I have). However sometimes combine truly shines, particularly when it comes to introducing understandable pipelines in your app.</p>

<p>Recently I had to implement a GitHub authenticator for a small utility tool and, I found that some features of the Combine were perfectly suitable for it. First let’s take a quick review of how Github Oath authentication works.</p>
<h2 id="github-oath">Github Oath</h2>
<p>You can find the detailed descriptions in the <a href="https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app">official docs</a>. However for my usage I needed to use the solution that is explained in <a href="https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-user-access-token-for-a-github-app#using-the-device-flow-to-generate-a-user-access-token">this section</a>.</p>

<p>Basically, you have to follow these steps;</p>

<p>1) Create an app in your Github account and enable the OAuth authentication for it. After that, copy the client ID that it will provide for you.</p>

<p>2) Use the client ID to send a POST request to this URL <code class="language-plaintext highlighter-rouge">https://github.com/login/device/code</code> for receiving a<code class="language-plaintext highlighter-rouge">user_code</code></p>

<p>3) Show a web page with this URL to the user, or prompt the user to open the URL. After that show them the <code class="language-plaintext highlighter-rouge">user_code</code> and ask them to enter it on that page.</p>

<p>4) Since you don’t have any clue that the user has entered the code or not you need to frequently call the API with this URL <code class="language-plaintext highlighter-rouge">https://github.com/login/oauth/access_token</code> to check the status.</p>

<p>5) Once you receive a result from the latter API, you can stop the polling and handle the result based on whether it contains an error or the token that you’re looking for.</p>

<h2 id="implementing-it-in-our-app">Implementing it in our app</h2>
<h3 id="starting-the-authentication-process">Starting the authentication process</h3>
<p>First, since we have some sort of state management associated with this authentication process, let’s define a class called <code class="language-plaintext highlighter-rouge">GithubOAuth</code>, like this;</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">GithubOAuth</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">session</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="o">.</span><span class="n">shared</span>
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">clientID</span> <span class="o">=</span> <span class="s">"&lt;YOUR_CLIENT_ID&gt;"</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">redirectInfo</span><span class="p">:</span> <span class="kt">RedirectInfo</span><span class="p">?</span>
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">RedirectInfo</code> is a model that represents the response that you get in the first API call.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">RedirectInfo</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">expiresIn</span><span class="p">:</span> <span class="kt">Int</span>
  <span class="k">let</span> <span class="nv">interval</span><span class="p">:</span> <span class="kt">Int</span>
  <span class="k">let</span> <span class="nv">code</span><span class="p">:</span> <span class="kt">String</span>
  <span class="k">let</span> <span class="nv">deviceCode</span><span class="p">:</span> <span class="kt">String</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Note: <em>You need to pars it from a query string. You can create an empty <code class="language-plaintext highlighter-rouge">URLComponent</code>, pass the query string as <code class="language-plaintext highlighter-rouge">components.query</code> and read its items by <code class="language-plaintext highlighter-rouge">components.queryItems</code>. Alternatively you can pars it manually. I’ve implemented a simple manual parsing function in the final sample code that you can use.</em></p>

<p>Now you can write the start of your authentication process.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">GithubOAuth</span> <span class="p">{</span>
<span class="kd">func</span> <span class="nf">startAuth</span><span class="p">()</span> <span class="k">async</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="p">(</span><span class="nv">redirectURL</span><span class="p">:</span> <span class="kt">URL</span><span class="p">,</span> <span class="nv">code</span><span class="p">:</span> <span class="kt">String</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">request</span> <span class="o">=</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://github.com/login/device/code"</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>
  <span class="n">request</span><span class="o">.</span><span class="n">httpMethod</span> <span class="o">=</span> <span class="s">"POST"</span>
  <span class="n">request</span><span class="o">.</span><span class="n">url</span><span class="p">?</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nv">queryItems</span><span class="p">:</span> <span class="p">[</span><span class="kt">URLQueryItem</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"client_id"</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">clientID</span><span class="p">)])</span>
  <span class="k">let</span> <span class="p">(</span><span class="nv">data</span><span class="p">,</span> <span class="nv">res</span><span class="p">)</span> <span class="o">=</span> <span class="k">try</span> <span class="k">await</span> <span class="n">session</span><span class="o">.</span><span class="nf">data</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">request</span><span class="p">)</span>
  <span class="k">let</span> <span class="nv">string</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="n">data</span><span class="p">,</span> <span class="nv">encoding</span><span class="p">:</span> <span class="o">.</span><span class="n">utf8</span><span class="p">)</span><span class="o">!</span>
  <span class="n">redirectInfo</span> <span class="o">=</span> <span class="kt">RedirectInfo</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="n">string</span><span class="p">)</span>
  <span class="nf">return</span> <span class="p">(</span>
    <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://github.com/login/device"</span><span class="p">)</span><span class="o">!</span><span class="p">,</span>
    <span class="n">redirectInfo</span><span class="o">!.</span><span class="n">code</span>
  <span class="p">)</span>
<span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p>After we ask the user to enter the <code class="language-plaintext highlighter-rouge">code</code>  at the <code class="language-plaintext highlighter-rouge">redirectURL</code> now it’s time to poll the second API and check if the user has entered the code or not. <mark>Here is the place that Combine comes in!</mark></p>
<h3 id="polling-the-authentication-state-api">Polling the authentication state API</h3>
<p>Let’s start by defining a function that will produce our polling states over time.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">GithubOAuth</span> <span class="p">{</span>
<span class="c1">//...</span>
<span class="kd">private</span> <span class="kd">func</span> <span class="nf">pollAuthenticationStatusPublisher</span><span class="p">(</span>
  <span class="nv">clientID</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
  <span class="nv">deviceCode</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
  <span class="nv">interval</span><span class="p">:</span> <span class="kt">Int</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">AnyPublisher</span><span class="o">&lt;</span><span class="kt">GithubAuthState</span><span class="p">,</span> <span class="kt">GithubOAuthError</span><span class="o">&gt;</span> <span class="p">{</span>
<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">GithubPollResponse</code> is the response of polling api. It indicates that whether polling should be continued, if it has failed or if the token has been received.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">GithubPollResponse</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">token</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
  <span class="k">let</span> <span class="nv">continuePolling</span><span class="p">:</span> <span class="kt">Bool</span>
  <span class="k">let</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">String</span><span class="p">?</span>
<span class="p">}</span>
</code></pre></div></div>
<p>The same parsing mechanism that’s been mentioned for <code class="language-plaintext highlighter-rouge">RedirectInfo</code> can be used for constructing <code class="language-plaintext highlighter-rouge">GithubPollResponse</code> from a query string. For better readability we can map this to an <code class="language-plaintext highlighter-rouge">GithubAuthState</code> enum and get rid of unnecessary combinations of the three optional properties.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="kt">GithubAuthState</span> <span class="p">{</span>
  <span class="k">case</span> <span class="n">keep</span>
  <span class="k">case</span> <span class="nf">finished</span><span class="p">(</span><span class="kt">GithubToken</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">GithubPollResponse</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">toAuthState</span><span class="p">()</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">GithubAuthState</span> <span class="p">{</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">error</span> <span class="p">{</span> 
      <span class="k">throw</span> <span class="kt">PollError</span><span class="p">(</span><span class="nv">message</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="o">!</span><span class="n">continuePolling</span> <span class="o">&amp;&amp;</span> <span class="n">token</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="kt">PollError</span><span class="p">(</span><span class="nv">message</span><span class="p">:</span> <span class="s">"Token should be provided with a successful result"</span><span class="p">)</span> 
    <span class="p">}</span>
    <span class="k">if</span> <span class="n">continuePolling</span> <span class="p">{</span>
      <span class="k">return</span> <span class="o">.</span><span class="n">keep</span> 
    <span class="p">}</span>
    <span class="k">return</span> <span class="o">.</span><span class="nf">finished</span><span class="p">(</span><span class="kt">GithubToken</span><span class="p">(</span><span class="nv">accessToken</span><span class="p">:</span> <span class="n">token</span><span class="o">!</span><span class="p">))</span>
  <span class="p">}</span>

  <span class="kd">struct</span> <span class="kt">PollError</span><span class="p">:</span> <span class="kt">Error</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">message</span><span class="p">:</span> <span class="kt">String</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<h3 id="create-the-polling-pipeline">Create the polling pipeline</h3>
<p>We need to perform the polling periodically based on the time interval that we received from the first API. First let’s create a timer.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Timer</span>
<span class="o">.</span><span class="nf">publish</span><span class="p">(</span><span class="nv">every</span><span class="p">:</span> <span class="kt">TimeInterval</span><span class="p">(</span><span class="n">interval</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span> <span class="nv">on</span><span class="p">:</span> <span class="o">.</span><span class="n">main</span><span class="p">,</span> <span class="nv">in</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">)</span>
<span class="o">.</span><span class="nf">autoconnect</span><span class="p">()</span>
<span class="c1">//continued ...</span>
</code></pre></div></div>
<p>With every event that the timer publishes we want to poll the second API. Since we’re already using Combine to create a timer, it would be the best to create poll requests also as Combine publishers. <mark>Whenever we are in this situation of creating bunch of publisher with events of another publisher, the `flatMap` operator can be quite useful in order to flatten all of them into one upstream publisher.</mark></p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//... After the timer</span>
<span class="o">.</span><span class="nf">flatMap</span><span class="p">(</span><span class="nv">maxPublishers</span><span class="p">:</span> <span class="o">.</span><span class="nf">max</span><span class="p">(</span><span class="mi">15</span><span class="p">))</span> <span class="p">{</span> <span class="p">[</span><span class="k">unowned</span> <span class="k">self</span><span class="p">]</span> <span class="n">_</span> <span class="k">in</span>
  <span class="k">self</span><span class="o">.</span><span class="nf">pollAuthenticationDataTaskPublisher</span><span class="p">(</span><span class="n">clientID</span><span class="p">,</span> <span class="n">deviceCode</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//continued ...</span>

<span class="c1">//Somewhere else in our class</span>
<span class="kd">extension</span> <span class="kt">GithubOAuth</span> <span class="p">{</span>
  <span class="kd">typealias</span> <span class="kt">PollAuthenticationDataTaskPublisher</span> <span class="o">=</span> <span class="p">(</span>
    <span class="n">_</span> <span class="nv">clientID</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
    <span class="n">_</span> <span class="nv">deviceCode</span><span class="p">:</span> <span class="kt">String</span>
  <span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">AnyPublisher</span><span class="o">&lt;</span><span class="kt">URLSession</span><span class="o">.</span><span class="kt">DataTaskPublisher</span><span class="o">.</span><span class="kt">Output</span><span class="p">,</span> <span class="kt">URLSession</span><span class="o">.</span><span class="kt">DataTaskPublisher</span><span class="o">.</span><span class="kt">Failure</span><span class="o">&gt;</span>
  
  <span class="kd">fileprivate</span> <span class="kd">static</span> <span class="kd">func</span> <span class="nf">_pollAuthenticationDataTaskPublisher</span><span class="p">(</span>
    <span class="nv">clientID</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
    <span class="nv">deviceCode</span><span class="p">:</span> <span class="kt">String</span>
  <span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">AnyPublisher</span><span class="o">&lt;</span><span class="kt">URLSession</span><span class="o">.</span><span class="kt">DataTaskPublisher</span><span class="o">.</span><span class="kt">Output</span><span class="p">,</span> <span class="kt">URLSession</span><span class="o">.</span><span class="kt">DataTaskPublisher</span><span class="o">.</span><span class="kt">Failure</span><span class="o">&gt;</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">request</span> <span class="o">=</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="s">"https://github.com/login/oauth/access_token"</span><span class="p">)</span><span class="o">!</span><span class="p">)</span>
    <span class="n">request</span><span class="o">.</span><span class="n">httpMethod</span> <span class="o">=</span> <span class="s">"POST"</span>
    <span class="n">request</span><span class="o">.</span><span class="n">url</span><span class="p">?</span><span class="o">.</span><span class="nf">append</span><span class="p">(</span><span class="nv">queryItems</span><span class="p">:</span> <span class="p">[</span>
      <span class="kt">URLQueryItem</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"client_id"</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">clientID</span><span class="p">),</span>
      <span class="kt">URLQueryItem</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"device_code"</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="n">deviceCode</span><span class="p">),</span>
      <span class="kt">URLQueryItem</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"grant_type"</span><span class="p">,</span> <span class="nv">value</span><span class="p">:</span> <span class="s">"urn:ietf:params:oauth:grant-type:device_code"</span><span class="p">)</span>
    <span class="p">])</span>
    <span class="k">return</span> <span class="kt">URLSession</span><span class="o">.</span><span class="n">shared</span><span class="o">.</span><span class="nf">dataTaskPublisher</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="n">request</span><span class="p">)</span><span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">PollAuthenticationDataTaskPublisher</code> accepts required parameters and provides necessary elements for polling the API and returns a publisher that performs an asynchronous networking code with combine.</p>

<p>Another nice thing is that with <code class="language-plaintext highlighter-rouge">maxPublisher</code>, we can define maximum amount of ongoing api calls and fail the publisher if the result can’t be received after certain amount of API calls.
After that, we add bunch of error mapping and result mapping to read and convert the response of the API.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//...</span>
<span class="o">.</span><span class="nf">mapError</span><span class="p">(</span><span class="kt">GithubOAuthError</span><span class="o">.</span><span class="n">pollAPIError</span><span class="p">)</span>
<span class="o">.</span><span class="n">tryMap</span><span class="p">{</span> <span class="n">arg</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">String</span> <span class="k">in</span>
  <span class="k">guard</span> <span class="k">let</span> <span class="nv">string</span> <span class="o">=</span> <span class="kt">String</span><span class="p">(</span><span class="nv">data</span><span class="p">:</span> <span class="n">arg</span><span class="o">.</span><span class="n">data</span><span class="p">,</span> <span class="nv">encoding</span><span class="p">:</span> <span class="o">.</span><span class="n">utf8</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
    <span class="k">throw</span> <span class="kt">GithubOAuthError</span><span class="o">.</span><span class="n">invalidData</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">string</span>
<span class="p">}</span>
<span class="o">.</span><span class="n">tryMap</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">response</span> <span class="o">=</span> <span class="kt">GithubPollResponse</span><span class="p">(</span><span class="nv">string</span><span class="p">:</span> <span class="nv">$0</span><span class="p">)</span>
  <span class="k">return</span> <span class="k">try</span> <span class="n">response</span><span class="o">.</span><span class="nf">toAuthState</span><span class="p">()</span>
<span class="p">}</span>
<span class="o">.</span><span class="nf">mapError</span><span class="p">(</span><span class="kt">GithubOAuthError</span><span class="o">.</span><span class="n">authStateError</span><span class="p">)</span>

<span class="c1">//..continued</span>
</code></pre></div></div>
<p>And at the end as always we need to simplify our gigantic(!) publisher type with;</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//...</span>
<span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">()</span>
</code></pre></div></div>
<h3 id="observe-the-polling-results">Observe the polling results</h3>
<p>For the users of our Github authenticator, it’s really not that important to know the polling states and its implementation details. In addition to that, it’s also required to cancel the polling process when an error occurs or the token is received. Also, I personally often try to convert Combine publishers to their async await equivalent if it’s possible. With all that in mind, let’s write a function that will use our polling pipeline to retrieve user credentials.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">GithubOAuth</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="kd">func</span> <span class="nf">observeAuthentication</span><span class="p">()</span> <span class="k">async</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">GithubToken</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">redirectInfo</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="kt">GithubAuthenticatorError</span><span class="o">.</span><span class="n">authPollDidNotRespond</span>
    <span class="p">}</span>
    <span class="k">let</span> <span class="nv">publisher</span> <span class="o">=</span> <span class="nf">pollAuthenticationStatusPublisher</span><span class="p">(</span>
      <span class="nv">clientID</span><span class="p">:</span> <span class="n">clientID</span><span class="p">,</span>
      <span class="nv">deviceCode</span><span class="p">:</span> <span class="n">redirectInfo</span><span class="o">.</span><span class="n">deviceCode</span><span class="p">,</span>
      <span class="nv">interval</span><span class="p">:</span> <span class="n">redirectInfo</span><span class="o">.</span><span class="n">interval</span>
    <span class="p">)</span>
    
    <span class="k">for</span> <span class="k">try</span> <span class="k">await</span> <span class="n">values</span> <span class="k">in</span> <span class="n">publisher</span><span class="o">.</span><span class="n">values</span> <span class="p">{</span>
      <span class="k">switch</span> <span class="n">values</span> <span class="p">{</span>
        <span class="k">case</span> <span class="o">.</span><span class="nv">keep</span><span class="p">:</span>
          <span class="k">continue</span>
        <span class="k">case</span> <span class="o">.</span><span class="nf">finished</span><span class="p">(</span><span class="k">let</span> <span class="nv">token</span><span class="p">):</span>
          <span class="k">return</span> <span class="n">token</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">throw</span> <span class="kt">GithubAuthenticatorError</span><span class="o">.</span><span class="n">authPollDidNotRespond</span>
  <span class="p">}</span>
<span class="p">}</span>

</code></pre></div></div>
<h2 id="using-our-github-authenticator">Using our Github authenticator</h2>
<p>Now we can use our authenticator in other places of the project. One example of it can be like this;</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">GithubOAuthView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">oAuth</span> <span class="o">=</span> <span class="kt">GithubOAuth</span><span class="p">()</span>
  <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="c1">//....</span>
    <span class="kt">Button</span><span class="p">(</span><span class="s">"Login"</span><span class="p">)</span> <span class="p">{</span>
      <span class="kt">Task</span> <span class="p">{</span>
        <span class="k">do</span> <span class="p">{</span>
          <span class="k">let</span> <span class="p">(</span><span class="nv">url</span><span class="p">,</span> <span class="nv">code</span><span class="p">)</span> <span class="o">=</span> <span class="k">try</span> <span class="k">await</span> <span class="n">oAuth</span><span class="o">.</span><span class="nf">startAuth</span><span class="p">()</span>
          <span class="nf">open</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span>
          <span class="k">self</span><span class="o">.</span><span class="n">code</span> <span class="o">=</span> <span class="n">code</span>
          <span class="k">let</span> <span class="nv">token</span> <span class="o">=</span> <span class="k">try</span> <span class="k">await</span> <span class="n">oAuth</span><span class="o">.</span><span class="nf">observeAuthentication</span><span class="p">()</span>
          <span class="k">self</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">token</span><span class="o">.</span><span class="n">accessToken</span>
        <span class="p">}</span> <span class="k">catch</span> <span class="p">{</span>
          <span class="c1">//handle the errors gracefully</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="conclusion">Conclusion</h2>
<p>In this article, with a practical example, I have explained how we can still benefit from some powerful features of the Combine framework like <code class="language-plaintext highlighter-rouge">Timer</code> and <code class="language-plaintext highlighter-rouge">flatMap</code>. Arguably, it’s still possible to implement these functionalities with other tools, but as we’ve seen here, sometimes Combine can be the easiest and the most convenient approach. The complete code of the Github authenticator is available on <a href="https://gist.github.com/shaysugg/06c0374b65de8c408569e9b7ec5c8676">Gist</a>.</p>

<p>As always if you have any suggestions or questions you can reach out to me at my <a href="https://github.com/shaysugg">Github</a> or <a href="https://www.linkedin.com/in/shayan-barghaman/)">LinkedIn</a>.</p>

<p>Hope you find this one useful.</p>

<p>Cheers!</p>]]></content><author><name>Shayan B</name></author><summary type="html"><![CDATA[It’s been a couple of years since the introduction of async await in Swift and the debates between usage of Swift’s modern concurrency and combine to address asynchronous requirements have become quite controversial. While using async await is usually more readable and understandable, especially for developers with no prior experience in reactive programming (Can’t truly say I have). However sometimes combine truly shines, particularly when it comes to introducing understandable pipelines in your app.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://shaysugg.github.io/" /><media:content medium="image" url="https://shaysugg.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Setting up Core Data in a package</title><link href="https://shaysugg.github.io//2024/05/19/SetupCoreDataInPackages.html" rel="alternate" type="text/html" title="Setting up Core Data in a package" /><published>2024-05-19T00:00:00+03:30</published><updated>2024-05-19T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/05/19/SetupCoreDataInPackages</id><content type="html" xml:base="https://shaysugg.github.io//2024/05/19/SetupCoreDataInPackages.html"><![CDATA[<p>There are couple of issues that I’ve encountered recently when I wanted to move all my CoreData logics from the main application to a separate packages. I couldn’t find any specific place that addressed all of these problems. Most of the solutions and workarounds that I found were buried in the stack overflow answers or Apple developer forums discussions. So here I gather three major problems that are quite common to face.</p>
<h2 id="setting-up-persistent-container">Setting up Persistent Container</h2>
<p>In your packages, you should manually setup the CoreData persistent container. In order to do this, you need a path to your Data Model file. For the applications, we tend to use</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Bundle</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="nf">url</span><span class="p">(</span><span class="nv">forResource</span><span class="p">:</span> <span class="s">"Your-DataModel-File-Name"</span><span class="p">,</span> <span class="nv">withExtension</span><span class="p">:</span> <span class="s">"momd"</span><span class="p">)</span>
</code></pre></div></div>
<p>But when you’re in a package, you should use <code class="language-plaintext highlighter-rouge">module</code> bundle instead of <code class="language-plaintext highlighter-rouge">main</code> like:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">Bundle</span><span class="o">.</span><span class="n">module</span><span class="o">.</span><span class="nf">url</span><span class="p">(</span><span class="nv">forResource</span><span class="p">:</span> <span class="s">"Your-DataModel-File-Name"</span><span class="p">,</span> <span class="nv">withExtension</span><span class="p">:</span> <span class="s">"momd"</span><span class="p">)</span>
</code></pre></div></div>
<p>After that, you need to move your Data Model files into a specific directory called Resources. If you don’t have such a directory, create one in this hierarchical format:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;YourPackageName&gt;
	Sources
		&lt;YourPackageName&gt;
			Resources
</code></pre></div></div>
<p>More information about packages resource management can be found at:
<a href="https://developer.apple.com/documentation/xcode/bundling-resources-with-a-swift-package">Building resource with a Swift package</a>.
If everything goes correctly, you should be able to instantiate your Persistent Container like this:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">guard</span> <span class="k">let</span> <span class="nv">url</span> <span class="o">=</span> <span class="kt">Bundle</span><span class="o">.</span><span class="n">module</span><span class="o">.</span><span class="nf">url</span><span class="p">(</span><span class="nv">forResource</span><span class="p">:</span> <span class="s">"Your-DataModel-File-Name"</span><span class="p">,</span> <span class="nv">withExtension</span><span class="p">:</span> <span class="s">"momd"</span><span class="p">),</span>
<span class="k">let</span> <span class="nv">model</span> <span class="o">=</span> <span class="kt">NSManagedObjectModel</span><span class="p">(</span><span class="nv">contentsOf</span><span class="p">:</span> <span class="n">url</span><span class="p">)</span> <span class="k">else</span> <span class="p">{</span>
  <span class="nf">fatalError</span><span class="p">(</span><span class="s">"Unable to load data model file"</span><span class="p">)</span>
<span class="p">}</span>
<span class="kt">PersistentContainer</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"Your-DataModel-File-Name"</span><span class="p">,</span> <span class="nv">managedObjectModel</span><span class="p">:</span> <span class="n">model</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="creating-coredata-model-objects-problem">Creating CoreData Model Objects problem</h2>
<p>Well, I was creating my core data object the same way I used to in apps but I faced runtime crashes and got errors like this:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">object</span> <span class="o">=</span> <span class="kt">MyObject</span><span class="p">(</span><span class="nv">context</span><span class="p">:</span> <span class="n">container</span><span class="o">.</span><span class="n">viewContext</span><span class="p">)</span>
<span class="c1">//Error!: An NSManagedObject of class 'ModularAppKit.ArticleMO' must have a valid NSEntityDescription.</span>
</code></pre></div></div>
<p>Which honestly, the error description wasn’t exactly pointing out what the actual cause of the error was. So I initialized my object in this way</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">let</span> <span class="nv">entityDescription</span> <span class="o">=</span> <span class="kt">NSEntityDescription</span><span class="o">.</span><span class="nf">entity</span><span class="p">(</span><span class="nv">forEntityName</span><span class="p">:</span> <span class="s">"Your Entity"</span><span class="p">,</span> <span class="nv">in</span><span class="p">:</span> <span class="n">managedObjectContext</span><span class="p">)</span>  
<span class="k">let</span> <span class="nv">object</span> <span class="o">=</span> <span class="kt">MyObject</span><span class="p">(</span><span class="nv">entity</span><span class="p">:</span> <span class="n">entityDescription</span><span class="o">!</span><span class="p">,</span> <span class="nv">insertInto</span><span class="p">:</span> <span class="n">managedObjectContext</span><span class="p">)</span>
</code></pre></div></div>
<p>Everything went back to normal, and it seemed that manually adding NSEntityDescription fixed the issue. However, <strong>the actual reason of this problem was something more general</strong>, so another error appeared in a more bizarre format later on when I attempted to fetch data.</p>
<h2 id="problem-with-fetch-requesting-stuff">Problem with “Fetch request”ing stuff</h2>
<p>I had this run time error that caused the application to crash when I wanted to query a bunch of objects with a simple fetch request. The error description this time was TOTALLY misleading; it was complaining that my Core Data objects don’t have the correct type and they are <code class="language-plaintext highlighter-rouge">NSManagedObject</code>s (???)</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>**NSArray element failed to match the Swift Array Element type**
**Expected MyObject but found NSManagedObject**

// MyObject is the name of my Entity class
</code></pre></div></div>

<p>After going through a lots of hassles, it turned out the solution for this one was to go to your Core data Model Editor, in the right Xcode right panel, under entity class section, <mark>explicitly write your package name inside the model field</mark> instead of “Current Product Module” which is the default value!</p>

<p><img src="https://shaysugg.github.io//assets/posts/SetupCoreDataInPackages-ModuleName.png" alt="2024-05-19-SetupCoreDataInPackages" />
<em>Here the module name is set to ArticlesKit, which is the name of the package.</em></p>

<p>Changing this field also <strong>fix the previous problem related to NSManagedObject creation</strong>. You no longer required to specify the entity description.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Well, that’s it for now. Currently, everything is working fine. If I encounter another tricky issue I will update this post. In retrospective, I think it was worth all the hassles. Moving all of my Core Data logic into my CRUD package feels so nice right now, and as a result, my main app is capable of working with any form of local database, which is really cool!</p>

<p>If you have any questions, similar experiences or faced another issue when  setting up your Core Data inside a package, feel free to reach out to me at my <a href="https://github.com/shaysugg">Github</a> or <a href="https://www.linkedin.com/in/shayan-barghaman/)">LinkedIn</a>. I would be happy to discuss.</p>

<p>Thanks For reading! 
Cheers!</p>]]></content><author><name>Shayan B</name></author><summary type="html"><![CDATA[There are couple of issues that I’ve encountered recently when I wanted to move all my CoreData logics from the main application to a separate packages. I couldn’t find any specific place that addressed all of these problems. Most of the solutions and workarounds that I found were buried in the stack overflow answers or Apple developer forums discussions. So here I gather three major problems that are quite common to face. Setting up Persistent Container In your packages, you should manually setup the CoreData persistent container. In order to do this, you need a path to your Data Model file. For the applications, we tend to use Bundle.main.url(forResource: "Your-DataModel-File-Name", withExtension: "momd") But when you’re in a package, you should use module bundle instead of main like: Bundle.module.url(forResource: "Your-DataModel-File-Name", withExtension: "momd") After that, you need to move your Data Model files into a specific directory called Resources. If you don’t have such a directory, create one in this hierarchical format: &lt;YourPackageName&gt; Sources &lt;YourPackageName&gt; Resources More information about packages resource management can be found at: Building resource with a Swift package. If everything goes correctly, you should be able to instantiate your Persistent Container like this: guard let url = Bundle.module.url(forResource: "Your-DataModel-File-Name", withExtension: "momd"), let model = NSManagedObjectModel(contentsOf: url) else { fatalError("Unable to load data model file") } PersistentContainer(name: "Your-DataModel-File-Name", managedObjectModel: model)]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://shaysugg.github.io/" /><media:content medium="image" url="https://shaysugg.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Testing Observable Objects</title><link href="https://shaysugg.github.io//2024/05/08/TestingObservableObjects.html" rel="alternate" type="text/html" title="Testing Observable Objects" /><published>2024-05-08T00:00:00+03:30</published><updated>2024-05-08T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/05/08/TestingObservableObjects</id><content type="html" xml:base="https://shaysugg.github.io//2024/05/08/TestingObservableObjects.html"><![CDATA[<p>It’s usually a good practice to put view logics into <code class="language-plaintext highlighter-rouge">ObservableObject</code>s when working with SwiftUI. It brings various benefits like; <strong>reusability, testability, avoid SwiftUI view cycles</strong> and more.
One common scenario that we may find ourselves in, is retrieving data and handling its view side effects. It’s also common that our data retrievals to be asynchronous, as shown in the example below:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">Item</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">name</span><span class="p">:</span> <span class="kt">String</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">ItemList</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
  <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">items</span><span class="p">:</span> <span class="p">[</span><span class="kt">Item</span><span class="p">]</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">loadItems</span><span class="p">:</span> <span class="p">()</span> <span class="k">async</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Item</span><span class="p">]</span>

  <span class="nf">init</span><span class="p">(</span><span class="nv">loadItems</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="k">async</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Item</span><span class="p">])</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">loadItems</span> <span class="o">=</span> <span class="n">loadItems</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">load</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">Task</span> <span class="p">{</span>
      <span class="k">let</span> <span class="nv">items</span> <span class="o">=</span> <span class="k">await</span> <span class="nf">loadItems</span><span class="p">()</span>
      <span class="k">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="n">items</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>As you can see we used function injection <code class="language-plaintext highlighter-rouge">let loadItems: () async -&gt; [Item]</code> to enable injecting different item loading mechanisms into our ItemList. In production code, we may use networking or data base functions to return items. For testing purposes, we can simply inject a function that returns mock data, like:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">load2MockItems</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Item</span><span class="p">]</span> <span class="p">{</span>
  <span class="n">loadCallTimes</span> <span class="o">+=</span> <span class="mi">1</span>
  <span class="k">return</span> <span class="p">[</span><span class="kt">Item</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"hello"</span><span class="p">),</span> <span class="kt">Item</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"world"</span><span class="p">)]</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="writing-tests">Writing Tests</h2>
<p>Now that our <code class="language-plaintext highlighter-rouge">ItemList</code> is ready to test, let’s write a simple test to verify that when we load items successfully, our <code class="language-plaintext highlighter-rouge">items</code> property will be assigned correctly.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">final</span> <span class="kd">class</span> <span class="kt">ItemListTests</span><span class="p">:</span> <span class="kt">XCTest</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">itemList</span><span class="p">:</span> <span class="kt">ItemList</span><span class="o">!</span>
  <span class="k">var</span> <span class="nv">itemLoader</span><span class="p">:</span> <span class="kt">MockItemLoader</span><span class="o">!</span>
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">setUpWithError</span><span class="p">()</span> <span class="k">throws</span> <span class="p">{</span>
    <span class="k">try</span> <span class="k">super</span><span class="o">.</span><span class="nf">setUpWithError</span><span class="p">()</span>
    <span class="n">itemLoader</span> <span class="o">=</span> <span class="kt">MockItemLoader</span><span class="p">()</span>
    <span class="n">itemList</span> <span class="o">=</span> <span class="kt">ItemList</span><span class="p">(</span><span class="nv">loadItems</span><span class="p">:</span> <span class="n">itemLoader</span><span class="o">.</span><span class="n">load2MockItems</span><span class="p">)</span>
  <span class="p">}</span>
  
  <span class="k">override</span> <span class="kd">func</span> <span class="nf">tearDownWithError</span><span class="p">()</span> <span class="k">throws</span> <span class="p">{</span>
    <span class="k">try</span> <span class="k">super</span><span class="o">.</span><span class="nf">tearDownWithError</span><span class="p">()</span>
    <span class="n">itemLoader</span> <span class="o">=</span> <span class="kc">nil</span>
    <span class="n">itemList</span> <span class="o">=</span> <span class="kc">nil</span>
  <span class="p">}</span>
  
  <span class="kd">func</span> <span class="nf">testItemList_whenLoadItemsSuccessfully_itemsWillBeCorrectlyAssigned</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">//when</span>
    <span class="n">itemList</span><span class="o">.</span><span class="nf">load</span><span class="p">()</span>
    
    <span class="c1">//then</span>
    <span class="c1">//will thay pass??</span>
    <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">itemList</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
    <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">itemLoader</span><span class="o">.</span><span class="n">loadCallTimes</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> 
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">final</span> <span class="kd">class</span> <span class="kt">MockItemLoader</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">loadCallTimes</span> <span class="o">=</span> <span class="mi">0</span>
  <span class="kd">func</span> <span class="nf">load2MockItems</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Item</span><span class="p">]</span> <span class="p">{</span>
    <span class="n">loadCallTimes</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="p">[</span><span class="kt">Item</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"hello"</span><span class="p">),</span> <span class="kt">Item</span><span class="p">(</span><span class="nv">name</span><span class="p">:</span> <span class="s">"world"</span><span class="p">)]</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>We’ve defined a MockItemLoader which not only produces some mock data, but also keeps track of its loading method calls count.
In our actual test we set up the <code class="language-plaintext highlighter-rouge">loadItems</code> function of <code class="language-plaintext highlighter-rouge">ItemList</code> to use synchronous data from <code class="language-plaintext highlighter-rouge">MockItemLoader</code>. Then, we check if the passed function is called and the returned data is assigned correctly.</p>
<h2 id="the-problem">The Problem</h2>
<p>But if we run our test, <strong>it’s going to fail</strong>. <mark>The main reason is that while our `MockItemLoader` loading function is synchronous, it will be called in an asynchronous environment within our `ItemList`.</mark> We start a <strong>Task</strong> in our <code class="language-plaintext highlighter-rouge">ItemsList</code> <code class="language-plaintext highlighter-rouge">load()</code> method because we can’t make any assumption about whether loading is asynchronous or not. In our testing case ,while loading itself is synchronous it’s still not going to be executed synchronously, so we can’t check it with our XCTAsserts. 
At first It might seem that we can handle this problem by introducing a small amount of delay using <code class="language-plaintext highlighter-rouge">Task.sleep()</code>. However it’s usually a good practice to avoid any explicit latency when writing tests. On the other hand, we can utilize the <code class="language-plaintext highlighter-rouge">onChange</code> function of <code class="language-plaintext highlighter-rouge">ObservableObject</code>’s to wait for our desired behavior to appear before continuing our test.</p>
<h2 id="a-general-solution">A General solution</h2>
<p>Since the issue that we encountered can happen for other <code class="language-plaintext highlighter-rouge">ObservableObject</code>s as well, let’s write a general solution in form of a test private extension that can be used for all our <code class="language-plaintext highlighter-rouge">ObservableObjects</code>s.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">XCTestCase</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="n">wait</span><span class="o">&lt;</span><span class="kt">Object</span><span class="p">:</span> <span class="kt">ObservableObject</span><span class="o">&gt;</span><span class="p">(</span>
    <span class="n">forObject</span> <span class="nv">object</span><span class="p">:</span> <span class="kt">Object</span><span class="p">,</span>
    <span class="nv">timeout</span><span class="p">:</span> <span class="kt">Double</span><span class="p">,</span>
    <span class="n">toChange</span> <span class="nv">change</span><span class="p">:</span> <span class="p">(</span><span class="kt">Object</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Bool</span><span class="p">,</span>
    <span class="nv">testName</span><span class="p">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="k">#function</span><span class="p">,</span>
    <span class="k">in</span> <span class="nv">file</span><span class="p">:</span> <span class="kt">StaticString</span> <span class="o">=</span> <span class="k">#file</span><span class="p">,</span>
    <span class="n">at</span> <span class="nv">line</span><span class="p">:</span> <span class="kt">UInt</span> <span class="o">=</span> <span class="k">#line</span>
  <span class="p">)</span> <span class="k">async</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">publisher</span> <span class="o">=</span> <span class="n">object</span>
      <span class="o">.</span><span class="n">objectWillChange</span>
      <span class="o">.</span><span class="nf">timeout</span><span class="p">(</span><span class="o">.</span><span class="nf">seconds</span><span class="p">(</span><span class="n">timeout</span><span class="p">),</span> <span class="nv">scheduler</span><span class="p">:</span> <span class="kt">DispatchQueue</span><span class="o">.</span><span class="n">main</span><span class="p">)</span>

    <span class="k">for</span> <span class="k">await</span> <span class="n">_</span> <span class="k">in</span> <span class="n">publisher</span><span class="o">.</span><span class="n">values</span> <span class="p">{</span>
      <span class="k">if</span> <span class="nf">change</span><span class="p">(</span><span class="n">object</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="p">}</span>
    <span class="kt">XCTFail</span><span class="p">(</span><span class="s">"Timeout Reached"</span><span class="p">,</span> <span class="nv">file</span><span class="p">:</span> <span class="n">file</span><span class="p">,</span> <span class="nv">line</span><span class="p">:</span> <span class="n">line</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Now we can refactor our recent test into</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">testItemList_whenLoadItemsSuccessfully_itemsWillBeCorrectlyAssigned</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">//when</span>
  <span class="n">itemList</span><span class="o">.</span><span class="nf">load</span><span class="p">()</span>
  <span class="k">await</span> <span class="nf">wait</span><span class="p">(</span><span class="nv">forObject</span><span class="p">:</span> <span class="n">itemList</span><span class="p">,</span> <span class="nv">timeout</span><span class="p">:</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">itemList</span> <span class="k">in</span>
    <span class="o">!</span><span class="n">itemList</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">isEmpty</span>
  <span class="p">}</span>
  <span class="c1">//then</span>
  <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">itemList</span><span class="o">.</span><span class="n">items</span><span class="o">.</span><span class="n">count</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
  <span class="kt">XCTAssertEqual</span><span class="p">(</span><span class="n">itemLoader</span><span class="o">.</span><span class="n">loadCallTimes</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>
<p>We can now see that our test will pass and also we have a convenient way of waiting for the <code class="language-plaintext highlighter-rouge">ObservableObjects</code> in the other tests.
Hope you find this one useful! If you have any questions or workaround related to this problem feel free to reach out to me on my <a href="https://github.com/shaysugg">Github</a> or <a href="https://www.linkedin.com/in/shayan-barghaman/)">LinkedIn</a>.</p>

<p>Thanks for reading!
Cheers!</p>]]></content><author><name>Shayan B</name></author><summary type="html"><![CDATA[It’s usually a good practice to put view logics into ObservableObjects when working with SwiftUI. It brings various benefits like; reusability, testability, avoid SwiftUI view cycles and more. One common scenario that we may find ourselves in, is retrieving data and handling its view side effects. It’s also common that our data retrievals to be asynchronous, as shown in the example below: ```swift struct Item { let name: String }]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://shaysugg.github.io/" /><media:content medium="image" url="https://shaysugg.github.io/" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Download Manager - Part 4 - Thread safety</title><link href="https://shaysugg.github.io//2024/04/24/DownloadManager4.html" rel="alternate" type="text/html" title="Download Manager - Part 4 - Thread safety" /><published>2024-04-24T00:00:00+03:30</published><updated>2024-04-24T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/04/24/DownloadManager4</id><content type="html" xml:base="https://shaysugg.github.io//2024/04/24/DownloadManager4.html"><![CDATA[<p>For building a modern <code class="language-plaintext highlighter-rouge">DownloadManager</code> so far we’ve taken a look at</p>
<ul>
  <li><a href="https://shaysugg.github.io//2024/04/06/DownloadManager1.html">part1: URLSession and Swift modern concurrency</a></li>
  <li><a href="https://shaysugg.github.io//2024/04/21/DownloadManager2.html">part2: Pausing and resuming download tasks</a></li>
  <li><a href="https://shaysugg.github.io//2024/04/24/DownloadManager3.html">part3: Background downloads</a></li>
</ul>

<p>In this article I explain how we can improve our <code class="language-plaintext highlighter-rouge">DownloadManager</code> to be safely used across different threads. In other words, make it thread-safe.</p>
<h2 id="what-is-the-issue-with-the-current-downloadmanager">What is the issue with the current DownloadManager?</h2>
<p>First, let’s have a high-level view of how <code class="language-plaintext highlighter-rouge">DownloadManager</code> handles its states:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
<span class="c1">//...other properties</span>

<span class="c1">//state of downloads</span>
 <span class="kd">private</span> <span class="k">var</span> <span class="nv">downloads</span><span class="p">:</span> <span class="p">[</span><span class="kt">DownloadTaskID</span><span class="p">:</span> <span class="kt">DownloadTask</span><span class="p">]</span> <span class="o">=</span><span class="p">[:]</span>
 <span class="kd">private</span> <span class="k">var</span> <span class="nv">resumeData</span><span class="p">:</span> <span class="p">[</span><span class="kt">DownloadTaskID</span><span class="p">:</span> <span class="kt">Data</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>

<span class="c1">//we mutate the state from all of these bellow methods! </span>
 <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
  <span class="c1">// add to downloads</span>
<span class="p">}</span>

 <span class="kd">func</span> <span class="nf">resume</span><span class="p">(</span><span class="n">taskWithID</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">DownloadTaskID</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">DownloadTask</span><span class="p">?</span> <span class="p">{</span>
  <span class="c1">// add to resumeData</span>
<span class="p">}</span>

 <span class="kd">private</span> <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didFinishDownloadingTo</span> <span class="nv">location</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">//remove from downloadData</span>
<span class="p">}</span>

 <span class="kd">private</span> <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">task</span><span class="p">:</span> <span class="kt">URLSessionTask</span><span class="p">,</span> <span class="n">didCompleteWithError</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">?)</span> <span class="p">{</span>
  <span class="c1">//remove from downloadData</span>
  <span class="c1">//add to resumData</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Initially, It may seem nothing is wrong with our class implementation, However if we invoke our class methods from different threads, the class state on each of those threads can be different. This is called <em>Data Race</em>, and it’s a common concurrency problem. A Data Race occurs when a shared state is read and mutated from different threads at the same time. Different classes may take different approaches to handle such race conditions, which all of them involve a way of serializing access to their state.
One of the features that’s been introduced in swift modern concurrency is the <code class="language-plaintext highlighter-rouge">actor</code>, which is a suitable solution for a problem we currently have.</p>
<h2 id="what-is-an-actor">What is an actor?</h2>
<p>The <code class="language-plaintext highlighter-rouge">actor</code> is a modern concurrency solution designed to prevent data races. You can learn more about actors in the <a href="https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency#Actors">Swift documentations</a>. Apparently the only change that is required to turn a class into an actor is replace the <code class="language-plaintext highlighter-rouge">class</code> keyword to <code class="language-plaintext highlighter-rouge">actor</code>.</p>

<p><em>Well it simply just … not works!</em> at least in our case. Although <code class="language-plaintext highlighter-rouge">actor</code>s are reference types like classes but they have two main differences.</p>
<ul>
  <li>Actors serialize all access to their method and properties, which is the primary reason we are considering them now.</li>
  <li>Actors don’t support subclassing, because well, they are not actually classes!</li>
</ul>

<p>The main reason we inherited our <code class="language-plaintext highlighter-rouge">Downloadmanager</code> from <code class="language-plaintext highlighter-rouge">NSObject</code> was enable it to conform to <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code> which allows us to track the progress and results of our downloads. Well, can we export these <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code> responsibilities to another object, specially now that our <code class="language-plaintext highlighter-rouge">DownloadManager</code> implementation is becoming quite massive?</p>
<h2 id="modernizing-urlsessiondownloaddelegate-with-an-adapter">Modernizing URLSessionDownloadDelegate with an Adapter</h2>
<p>let’s create an adapter that conforms to <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code> and provides a nicer functional interface for working with the needed delegate methods.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadDelegateAdaptor</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
 <span class="kd">struct</span> <span class="kt">Config</span> <span class="p">{</span>
  <span class="k">var</span> <span class="nv">fileFinishedDownloading</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="n">_</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span><span class="n">_</span> <span class="nv">location</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span>
  
  <span class="k">var</span> <span class="nv">fileDownloadingProgress</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span><span class="n">_</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span><span class="n">_</span> <span class="nv">bytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span><span class="n">_</span> <span class="nv">totalBytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span><span class="n">_</span> <span class="nv">totalBytesExpectedToWrite</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span>
  
  <span class="k">var</span> <span class="nv">didCompleteWithError</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span><span class="n">_</span> <span class="nv">task</span><span class="p">:</span> <span class="kt">URLSessionTask</span><span class="p">,</span><span class="n">_</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">Void</span>
  
  <span class="k">var</span> <span class="nv">backgroundSessionDidFinishEvents</span><span class="p">:</span> <span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">Void</span>
 <span class="p">}</span>
 
 <span class="k">var</span> <span class="nv">config</span><span class="p">:</span> <span class="kt">Config</span><span class="p">?</span>

 <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didFinishDownloadingTo</span> <span class="nv">location</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">config</span><span class="p">?</span><span class="o">.</span><span class="nf">fileFinishedDownloading</span><span class="p">(</span><span class="n">session</span><span class="p">,</span><span class="n">downloadTask</span><span class="p">,</span><span class="n">location</span><span class="p">)</span>
 <span class="p">}</span>
 
<span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didWriteData</span> <span class="nv">bytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesExpectedToWrite</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">config</span><span class="p">?</span><span class="o">.</span><span class="nf">fileDownloadingProgress</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">downloadTask</span><span class="p">,</span> <span class="n">bytesWritten</span><span class="p">,</span> <span class="n">totalBytesWritten</span><span class="p">,</span> <span class="n">totalBytesExpectedToWrite</span><span class="p">)</span>
<span class="p">}</span>

 <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">task</span><span class="p">:</span> <span class="kt">URLSessionTask</span><span class="p">,</span> <span class="n">didCompleteWithError</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">?)</span> <span class="p">{</span>
  <span class="n">config</span><span class="p">?</span><span class="o">.</span><span class="nf">didCompleteWithError</span><span class="p">(</span><span class="n">session</span><span class="p">,</span> <span class="n">task</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
<span class="p">}</span>

 <span class="kd">func</span> <span class="nf">urlSessionDidFinishEvents</span><span class="p">(</span><span class="n">forBackgroundURLSession</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">)</span> <span class="p">{</span>
  <span class="n">config</span><span class="p">?</span><span class="o">.</span><span class="nf">backgroundSessionDidFinishEvents</span><span class="p">(</span><span class="n">session</span><span class="p">)</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>As you can see the adaptor doesn’t do anything special. It simply passes its config functions to the corresponding method of <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code>.Now that our adaptor can handle <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code>, instead of passing <code class="language-plaintext highlighter-rouge">DownloadManager</code> to handle its URLSession delegate, let’s create an instance of <code class="language-plaintext highlighter-rouge">DownloadDelegateAdaptor</code> and pass it as our <code class="language-plaintext highlighter-rouge">URLSession</code> delegate.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">actor</span> <span class="kt">DownloadManager</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="kd">lazy</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">downloadSession</span><span class="p">:</span> <span class="kt">URLSession</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">session</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="p">(</span>
      <span class="nv">configuration</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">,</span>
      <span class="nv">delegate</span><span class="p">:</span> <span class="n">downloadDelegate</span><span class="p">,</span>
      <span class="nv">delegateQueue</span><span class="p">:</span> <span class="kc">nil</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">session</span>
  <span class="p">}()</span>
  
  <span class="c1">//...</span>
  <span class="kd">lazy</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">downloadDelegate</span><span class="p">:</span> <span class="kt">URLSession</span><span class="o">.</span><span class="kt">DownloadDelegateAdaptor</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">delegate</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="o">.</span><span class="kt">DownloadDelegateAdaptor</span><span class="p">()</span>
    <span class="n">delegate</span><span class="o">.</span><span class="n">config</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="o">.</span><span class="kt">DownloadDelegateAdaptor</span><span class="o">.</span><span class="kt">Config</span><span class="p">(</span>
      <span class="nv">fileFinishedDownloading</span><span class="p">:</span> <span class="nf">urlSession</span><span class="p">(</span><span class="nv">_</span><span class="p">:</span><span class="nv">downloadTask</span><span class="p">:</span><span class="nv">didFinishDownloadingTo</span><span class="p">:),</span>
      <span class="nv">fileDownloadingProgress</span><span class="p">:</span> <span class="nf">urlSession</span><span class="p">(</span><span class="nv">_</span><span class="p">:</span><span class="nv">downloadTask</span><span class="p">:</span><span class="nv">didWriteData</span><span class="p">:</span><span class="nv">totalBytesWritten</span><span class="p">:</span><span class="nv">totalBytesExpectedToWrite</span><span class="p">:),</span>
      <span class="nv">didCompleteWithError</span><span class="p">:</span> <span class="nf">urlSession</span><span class="p">(</span><span class="nv">_</span><span class="p">:</span><span class="nv">task</span><span class="p">:</span><span class="nv">didCompleteWithError</span><span class="p">:),</span>
      <span class="nv">backgroundSessionDidFinishEvents</span><span class="p">:</span> <span class="nf">urlSessionDidFinishEvents</span><span class="p">(</span><span class="nv">forBackgroundURLSession</span><span class="p">:)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">delegate</span>
<span class="p">}()</span>
</code></pre></div></div>
<p>Note that we are keeping the previous <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code> methods in our <code class="language-plaintext highlighter-rouge">DownloadManager</code>. We will pass them as the configuration functions to our <code class="language-plaintext highlighter-rouge">DownloadDelegateAdaptor</code>.
Another benefit of this adaption is that we can reuse our <code class="language-plaintext highlighter-rouge">DownloadDelegateAdaptor</code> as a modern replacement of <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code> in other situations where we prefer using actors or value types. The same pattern can also be applied to other <code class="language-plaintext highlighter-rouge">URLSession</code> delegates like <code class="language-plaintext highlighter-rouge">URLSessionTaskDelegate</code> and `URLSessionDataDelegate</p>

<p>Well that wraps up these series. I hope I’ve covered most of the challenges that I faced while building this <code class="language-plaintext highlighter-rouge">DownloadManager</code>. <code class="language-plaintext highlighter-rouge">URLSession</code> APIs have indeed been modernized and improved significantly over the past couple of years. However sometimes we still need to use old APIs and delegate patterns to achieve various tasks. Nevertheless it’s worthwhile to consider different alternatives to modernize old apis, ultimately leading to interesting solutions that can be reuse elsewhere.</p>

<p>The complete implementation of <code class="language-plaintext highlighter-rouge">DownloadManager</code> is available on <a href="https://gist.github.com/shaysugg/8def3de858038eccf1ab2860424336e0">Gist</a>.</p>

<p>Also if you have any comments or suggestions, feel free to reach out to me on my <a href="https://www.linkedin.com/in/shayan-barghaman/">LinkedIn</a> or <a href="https://github.com/shaysugg">Github</a>.</p>

<p>Thanks for reading,
Cheers!</p>]]></content><author><name>Shayan B</name></author><summary type="html"><![CDATA[For building a modern DownloadManager so far we’ve taken a look at part1: URLSession and Swift modern concurrency part2: Pausing and resuming download tasks part3: Background downloads]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://shaysugg.github.io//assets/DownloadManager1.png" /><media:content medium="image" url="https://shaysugg.github.io//assets/DownloadManager1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Download Manager - Part 3 - Background downloads</title><link href="https://shaysugg.github.io//2024/04/23/DownloadManager3.html" rel="alternate" type="text/html" title="Download Manager - Part 3 - Background downloads" /><published>2024-04-23T00:00:00+03:30</published><updated>2024-04-23T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/04/23/DownloadManager3</id><content type="html" xml:base="https://shaysugg.github.io//2024/04/23/DownloadManager3.html"><![CDATA[<p>In the past series (<a href="https://shaysugg.github.io//2024/04/06/DownloadManager1.html">part1</a>, <a href="https://shaysugg.github.io//2024/04/21/DownloadManager2.html">part2</a>) we went through how we can build a <code class="language-plaintext highlighter-rouge">DownloadManager</code> that has modern concurrency-friendly apis and capable of pausing and resuming failed and canceled downloads.</p>

<p>In this article we will take a look at how we can add background download capability into our <code class="language-plaintext highlighter-rouge">DownloadManager</code>. Background download support is crucial for downloading large files. Many users may exit our app while a downloads is in progress, causing our app to enter a suspended state However users will expect the ongoing downloads to resume seamlessly. Fortunately supporting background downloads is not overly complicated, So let’s see how we we can implement this feature.</p>
<h2 id="background-download-capability">Background Download Capability</h2>
<p>The initial step in supporting background downloads is to define a dedicated <code class="language-plaintext highlighter-rouge">URLSession</code> with background configuration.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
 <span class="c1">//...</span>
  <span class="kd">lazy</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">backgroundDownloadSession</span><span class="p">:</span> <span class="kt">URLSession</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">config</span> <span class="o">=</span> <span class="kt">URLSessionConfiguration</span><span class="o">.</span><span class="nf">background</span><span class="p">()</span>
    <span class="n">config</span><span class="o">.</span><span class="n">isDiscretionary</span> <span class="o">=</span> <span class="kc">false</span>
    <span class="n">config</span><span class="o">.</span><span class="n">sessionSendsLaunchEvents</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="k">let</span> <span class="nv">session</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="p">(</span>
      <span class="nv">configuration</span><span class="p">:</span> <span class="n">config</span><span class="p">,</span>
      <span class="nv">delegate</span><span class="p">:</span> <span class="n">downloadDelegate</span><span class="p">,</span>
      <span class="nv">delegateQueue</span><span class="p">:</span> <span class="kc">nil</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">session</span>
 <span class="p">}()</span>
 
<span class="p">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">isDiscretionary</code> flag should be set to true for large file downloads with lower priority so the system may schedule the download based on various device conditions. However, in our case, if the app goes into the background, we often want the ongoing download to resume as soon as possible. Therefore, it’s been set to false.</p>

<p>Now we have to define a method that uses our background configured session to download files:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">backgroundDownload</span><span class="p">(</span>
  <span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">,</span>
  <span class="nv">earliestBeginDate</span><span class="p">:</span> <span class="kt">Date</span> <span class="o">=</span> <span class="kt">Date</span><span class="o">.</span><span class="n">now</span><span class="p">,</span>
  <span class="nv">countOfBytesClientExpectsToReceive</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">?</span> <span class="o">=</span> <span class="kc">nil</span><span class="p">,</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="n">backgroundDownloadSession</span><span class="o">.</span><span class="nf">downloadTask</span><span class="p">(</span>
    <span class="nv">with</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
  
  <span class="n">task</span><span class="o">.</span><span class="n">earliestBeginDate</span> <span class="o">=</span> <span class="n">earliestBeginDate</span>
  <span class="k">if</span> <span class="k">let</span> <span class="nv">countOfBytesClientExpectsToReceive</span> <span class="p">{</span>
    <span class="n">task</span><span class="o">.</span><span class="n">countOfBytesClientExpectsToReceive</span> <span class="o">=</span>
    <span class="n">countOfBytesClientExpectsToReceive</span> 
  <span class="p">}</span>

  <span class="k">let</span> <span class="nv">downloadTask</span> <span class="o">=</span> <span class="kt">DownloadTask</span><span class="p">(</span><span class="nv">urlSessionTask</span><span class="p">:</span> <span class="n">task</span><span class="p">)</span>
  <span class="n">downloads</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span> <span class="o">=</span> <span class="n">downloadTask</span>
  <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
  <span class="k">return</span> <span class="n">downloadTask</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This method implementation is similar to our regular download method that we implemented in <a href="/2024/04/06/DownloadManager1.html">part1</a> but with additional configurations. We capture <code class="language-plaintext highlighter-rouge">earliestBeginDate</code>, <code class="language-plaintext highlighter-rouge">countOfBytesClientExpectsToReceive</code> parameters and pass them to <code class="language-plaintext highlighter-rouge">DownloadTask</code>.</p>
<h3 id="handling-app-suspension">Handling app suspension</h3>
<p>If our app gets suspended in the background, our background downloads may continue in another process. When they’re finished, the system resumes the app and notify that the download is finished by calling this method in the <code class="language-plaintext highlighter-rouge">AppDelegate</code>:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">application</span><span class="p">(</span>
 <span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">,</span>
 <span class="n">handleEventsForBackgroundURLSession</span>
 <span class="nv">identifier</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
 <span class="nv">completionHandler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span>
</code></pre></div></div>
<p>We should store the completion handler in our <code class="language-plaintext highlighter-rouge">DownloadManager</code> and call it when this <code class="language-plaintext highlighter-rouge">URLSessionDelegate</code> method is being called.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">urlSessionDidFinishEvents</span><span class="p">(</span><span class="n">forBackgroundURLSession</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">)</span>
</code></pre></div></div>
<p>More information for handling app suspension can be found in the <a href="https://developer.apple.com/documentation/foundation/url_loading_system/downloading_files_in_the_background">Apple documentations</a>. In our use case, the changes that will be needed are:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">AppDelegate</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">UIApplicationDelegate</span> <span class="p">{</span>
<span class="c1">// ....</span>
 <span class="kd">func</span> <span class="nf">application</span><span class="p">(</span>
  <span class="n">_</span> <span class="nv">application</span><span class="p">:</span> <span class="kt">UIApplication</span><span class="p">,</span>
  <span class="n">handleEventsForBackgroundURLSession</span> <span class="nv">identifier</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span>
  <span class="nv">completionHandler</span><span class="p">:</span> <span class="kd">@escaping</span> <span class="p">()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)</span> <span class="p">{</span>
   <span class="kt">DownloadManager</span><span class="o">.</span><span class="n">main</span><span class="o">.</span><span class="n">backgroundCompletionHandler</span> <span class="o">=</span> <span class="n">completionHandler</span>
 <span class="p">}</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
 <span class="c1">//...</span>
 <span class="k">var</span> <span class="nv">backgroundCompletionHandler</span><span class="p">:</span> <span class="p">(()</span> <span class="o">-&gt;</span> <span class="kt">Void</span><span class="p">)?</span>
 <span class="c1">//...</span>
 <span class="kd">func</span> <span class="nf">urlSessionDidFinishEvents</span><span class="p">(</span>
 <span class="n">forBackgroundURLSession</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">)</span> <span class="p">{</span>
  <span class="nf">backgroundCompletionHandler</span><span class="p">?()</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>There are several good points related to background downloading have been mentioned in this <strong>SwiftLee</strong> blog post. Definitely worth to check them out.
 <a href="https://www.avanderlee.com/swift/urlsession-common-pitfalls-with-background-download-upload-tasks/">URLSession: Common pitfalls with background download &amp; upload tasks</a></p>

<p>In the next article, I’m going to explain potential concurrency problems that we may face with the current implementation of <code class="language-plaintext highlighter-rouge">DownloadManager</code> and why it’s recommended to consider our <code class="language-plaintext highlighter-rouge">DownloadManager</code> to be an <code class="language-plaintext highlighter-rouge">actor</code>.</p>

<p>The complete implementation of <code class="language-plaintext highlighter-rouge">DownloadManager</code> is available on <a href="https://gist.github.com/shaysugg/8def3de858038eccf1ab2860424336e0">Gist</a>.</p>

<p>Thank you for reading.</p>

<p>Cheers!</p>]]></content><author><name>Shayan B</name></author><summary type="html"><![CDATA[In the past series (part1, part2) we went through how we can build a DownloadManager that has modern concurrency-friendly apis and capable of pausing and resuming failed and canceled downloads.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://shaysugg.github.io//assets/DownloadManager1.png" /><media:content medium="image" url="https://shaysugg.github.io//assets/DownloadManager1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Download Manager - Part 2 - Pausing and resuming download tasks</title><link href="https://shaysugg.github.io//2024/04/21/DownloadManager2.html" rel="alternate" type="text/html" title="Download Manager - Part 2 - Pausing and resuming download tasks" /><published>2024-04-21T00:00:00+03:30</published><updated>2024-04-21T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/04/21/DownloadManager2</id><content type="html" xml:base="https://shaysugg.github.io//2024/04/21/DownloadManager2.html"><![CDATA[<p>In the <a href="https://shaysugg.github.io//2024/04/06/DownloadManager1.html">previous article</a> I explained how I built a <code class="language-plaintext highlighter-rouge">DownloadManager</code> that not only capable of downloading files, but also shows their progress. I also tried to make its methods more compatible with modern concurrency. In other words, tried to keep those delegate methods that is used for tracking download progress, internally.</p>

<p>It’s certainly important, especially for downloading large files, to have the ability to pause and resume downloads. Additionally since downloads may fail sometimes, we should be able to check if it’s possible to resume the download from the point it failed, instead of starting a completely new download from the beginning.
According to the <a href="https://developer.apple.com/documentation/foundation/url_loading_system/pausing_and_resuming_downloads">docs</a>, when a download is canceled it <strong>may</strong> return resume data. This data can be received as a closure or as a result of async await cancellation. By storing this data, we will be able to resume the download later.</p>
<h2 id="identifying-downloadtasks">Identifying DownloadTasks</h2>
<p>To integrate resuming data caching into the download manager, First let’s pass the <code class="language-plaintext highlighter-rouge">URLSessionTask</code> to our <code class="language-plaintext highlighter-rouge">DownloadTask</code> upon its initialization.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">urlSessionTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span>

  <span class="nf">init</span><span class="p">(</span><span class="nv">urlSessionTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">urlSessionTask</span> <span class="o">=</span> <span class="n">urlSessionTask</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Note that the <code class="language-plaintext highlighter-rouge">DownloadTask</code> currently acts as a wrapper around the <code class="language-plaintext highlighter-rouge">URLSessionTask</code>. It is arguable that right now it’s possible to call <code class="language-plaintext highlighter-rouge">URLSessionTask</code> methods directly without needing to use our <code class="language-plaintext highlighter-rouge">DownloadManager</code>, or in other words, our download Manager is not a complete <em>proxy</em> for our <code class="language-plaintext highlighter-rouge">URLSessionTask</code>s.
Since we are only interested in task identifier and cancelation method of <code class="language-plaintext highlighter-rouge">URLSessionTask</code> , we can make <code class="language-plaintext highlighter-rouge">URLSessionTask</code> private and only expose these functionalities outside.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">urlSessionTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span>
  <span class="k">var</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">DownloadTaskID</span> <span class="p">{</span> <span class="n">urlSessionTask</span><span class="o">.</span><span class="n">taskIdentifier</span> <span class="p">}</span>
	
  <span class="nf">init</span><span class="p">(</span><span class="nv">urlSessionTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">self</span><span class="o">.</span><span class="n">urlSessionTask</span> <span class="o">=</span> <span class="n">urlSessionTask</span>
  <span class="p">}</span>
	
  <span class="kd">func</span> <span class="nf">cancel</span><span class="p">()</span> <span class="k">async</span> <span class="o">-&gt;</span> <span class="kt">Data</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">await</span> <span class="n">urlSessionTask</span><span class="o">.</span><span class="nf">cancelByProducingResumeData</span><span class="p">()</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>If we’re using DownloadManager as a package, it’s also better to consider <code class="language-plaintext highlighter-rouge">cancel()</code> as an <code class="language-plaintext highlighter-rouge">internal</code> method.</p>

<h2 id="updating-the-downloadmanager">Updating The DownloadManager</h2>
<p>let’s add a cancel method and a dictionary that contains cancellation resume data to our <code class="language-plaintext highlighter-rouge">DownloaodManager</code>.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
  <span class="c1">//...</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">resumeData</span><span class="p">:</span> <span class="p">[</span><span class="kt">DownloadTaskID</span><span class="p">:</span> <span class="kt">Data</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
  <span class="c1">//...</span>
  <span class="kd">func</span> <span class="nf">cancel</span><span class="p">(</span><span class="n">taskWithID</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">DownloadTaskID</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="n">downloads</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="n">task</span><span class="o">.</span><span class="nf">finish</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="kt">DownloadCancellation</span><span class="p">())</span>
    <span class="n">downloads</span><span class="o">.</span><span class="nf">removeValue</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="n">id</span><span class="p">)</span>
    <span class="kt">Task</span> <span class="p">{</span>
      <span class="k">if</span> <span class="k">let</span> <span class="nv">resumeData</span> <span class="o">=</span> <span class="k">await</span> <span class="n">task</span><span class="o">.</span><span class="nf">cancel</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">self</span><span class="o">.</span><span class="n">resumeData</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="o">=</span> <span class="n">resumeData</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>As previously mentioned, resuming can also be useful for tasks that have been failed. let’s check if our failed tasks have resume data, and if so, store their resume datas.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
	<span class="c1">//...</span>
  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">task</span><span class="p">:</span> <span class="kt">URLSessionTask</span><span class="p">,</span> <span class="n">didCompleteWithError</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">?)</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">error</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="p">}</span>
    <span class="k">let</span> <span class="nv">download</span> <span class="o">=</span> <span class="n">downloads</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span>
    <span class="n">download</span><span class="p">?</span><span class="o">.</span><span class="nf">finish</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span>
    <span class="n">downloads</span><span class="o">.</span><span class="nf">removeValue</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">userInfo</span> <span class="o">=</span> <span class="p">(</span><span class="n">error</span> <span class="k">as</span> <span class="kt">NSError</span><span class="p">)</span><span class="o">.</span><span class="n">userInfo</span>
    <span class="k">if</span> <span class="k">let</span> <span class="nv">resumeData</span> <span class="o">=</span> 
    <span class="n">userInfo</span><span class="p">[</span><span class="kt">NSURLSessionDownloadTaskResumeData</span><span class="p">]</span> <span class="k">as?</span> <span class="kt">Data</span> <span class="p">{</span>
      <span class="k">self</span><span class="o">.</span><span class="n">resumeData</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span> <span class="o">=</span> <span class="n">resumeData</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>For resuming tasks we only need to find the corresponding data in our resume data dictionary and start a new URLSession task with it.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
	<span class="c1">//...</span>
  <span class="kd">func</span> <span class="nf">resume</span><span class="p">(</span><span class="n">taskWithID</span> <span class="nv">id</span><span class="p">:</span> <span class="kt">DownloadTaskID</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">DownloadTask</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">guard</span> <span class="k">let</span> <span class="nv">data</span> <span class="o">=</span> <span class="n">resumeData</span><span class="p">[</span><span class="n">id</span><span class="p">]</span> <span class="k">else</span> <span class="p">{</span> <span class="k">return</span> <span class="kc">nil</span> <span class="p">}</span>
    <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="n">downloadSession</span><span class="o">.</span><span class="nf">downloadTask</span><span class="p">(</span><span class="nv">withResumeData</span><span class="p">:</span> <span class="n">data</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">downloadTask</span> <span class="o">=</span> <span class="kt">DownloadTask</span><span class="p">(</span><span class="nv">urlSessionTask</span><span class="p">:</span> <span class="n">task</span><span class="p">)</span>
    <span class="n">downloads</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span> <span class="o">=</span> <span class="n">downloadTask</span>
    <span class="k">return</span> <span class="n">downloadTask</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>That’s all there is to it.</p>

<p>In the next article I will explain how we can add the ability to handle background downloads.
As a reminder, the complete Download manager implementation is available on <a href="https://gist.github.com/shaysugg/8def3de858038eccf1ab2860424336e0">Gist</a>.</p>

<p>Thank you for reading,
Cheers!</p>]]></content><author><name>Shayan B</name></author><summary type="html"><![CDATA[In the previous article I explained how I built a DownloadManager that not only capable of downloading files, but also shows their progress. I also tried to make its methods more compatible with modern concurrency. In other words, tried to keep those delegate methods that is used for tracking download progress, internally.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://shaysugg.github.io//assets/DownloadManager1.png" /><media:content medium="image" url="https://shaysugg.github.io//assets/DownloadManager1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Download Manager - Part 1 - URLSession and Swift modern concurrency</title><link href="https://shaysugg.github.io//2024/04/06/DownloadManager1.html" rel="alternate" type="text/html" title="Download Manager - Part 1 - URLSession and Swift modern concurrency" /><published>2024-04-06T00:00:00+03:30</published><updated>2024-04-06T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/04/06/DownloadManager1</id><content type="html" xml:base="https://shaysugg.github.io//2024/04/06/DownloadManager1.html"><![CDATA[<p>Apparently URLSession used to be so difficult to work with. Many people preferred using third-party network tools like <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> or <a href="https://github.com/Alamofire/Alamofire">Alamofire</a>. However over the past years it has its improvements. Two of its notable improvements can be the Combine and <code class="language-plaintext highlighter-rouge">async await</code> equivalent APIs. They replace the closure based APIs which can become error prone in advance usages. After all, nobody wants to deal with those nested closures inside each others.
Despite the improvements, I faced a few challenges while building a download manager class with a modern async await APIs in mind. Initially, I came up with something like this:</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DownloadManager</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">downloadSession</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="o">.</span><span class="n">shared</span>

  <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="k">async</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">URL</span> <span class="p">{</span>
    <span class="k">let</span> <span class="p">(</span><span class="nv">url</span><span class="p">,</span> <span class="nv">_</span><span class="p">)</span> <span class="o">=</span> <span class="k">try</span> <span class="n">downloadSession</span><span class="o">.</span><span class="nf">download</span><span class="p">(</span><span class="nv">for</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">url</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>This is totally fine for simple use cases, But most of the times specially for big files we want to track the download progress. Either for our logging and diagnostics or displaying the progress to the user.</p>
<h2 id="getting-the-download-progress">Getting the download progress</h2>
<p>Of course I had to use delegates. sigh. This <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code> method</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didWriteData</span> <span class="nv">bytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesExpectedToWrite</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">)</span>
</code></pre></div></div>
<p>Consequently, I changed my download manager from a struct to a class because It needed to inherit from <code class="language-plaintext highlighter-rouge">NSObject</code> to be able to conform to <code class="language-plaintext highlighter-rouge">URLSessionDownloadDelegate</code>. Additionally I assigned the <code class="language-plaintext highlighter-rouge">DownloadManager</code> class as my download session delegate.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
  <span class="kd">lazy</span> <span class="kd">private</span> <span class="k">var</span> <span class="nv">downloadSession</span><span class="p">:</span> <span class="kt">URLSession</span> <span class="o">=</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">session</span> <span class="o">=</span> <span class="kt">URLSession</span><span class="p">(</span>
      <span class="nv">configuration</span><span class="p">:</span> <span class="o">.</span><span class="k">default</span><span class="p">,</span>
      <span class="nv">delegate</span><span class="p">:</span> <span class="n">downloadDelegate</span><span class="p">,</span>
      <span class="nv">delegateQueue</span><span class="p">:</span> <span class="kc">nil</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">session</span>
	<span class="p">}()</span>

	<span class="c1">//...</span>

	<span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didWriteData</span> <span class="nv">bytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesExpectedToWrite</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">//progress can be found here!</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Also, note that <mark>when you assign a delegate to your URLSession configuration, all the completion handlers of your data tasks no longer work</mark>. You have to use <code class="language-plaintext highlighter-rouge">downloadTask(with: URLRequest(url: url))</code> in order to track the download progress. This <em>unfortunately</em> also means that you have to find if the download was successful or not within those delegate methods.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
	<span class="c1">// ....</span>
	
  <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// this won't report the progress </span>
    <span class="k">let</span> <span class="p">(</span><span class="nv">url</span><span class="p">,</span> <span class="nv">_</span><span class="p">)</span> <span class="o">=</span> <span class="k">try</span> <span class="n">downloadSession</span><span class="o">.</span><span class="nf">download</span><span class="p">(</span>
    <span class="nv">for</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="c1">// instead have to use this</span>
    <span class="n">downloadSession</span><span class="o">.</span><span class="nf">downloadTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="c1">// this function is not async anymore</span>
    <span class="c1">// i can't simply return the downloaded url from here</span>
    <span class="c1">// :(</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didFinishDownloadingTo</span> <span class="nv">location</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//figure out the download location belongs to which download task</span>
    <span class="c1">//by probably checking the task id?</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">task</span><span class="p">:</span> <span class="kt">URLSessionTask</span><span class="p">,</span> <span class="n">didCompleteWithError</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">?)</span> <span class="p">{</span>
    <span class="c1">//same id checking for figuring out download errors</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Well that certainly bring back bitter nostalgia and instantly throw me out of our beautiful async await world. Our beloved <code class="language-plaintext highlighter-rouge">func download(from url: URL) async throws -&gt; URL</code> <strong>pure function</strong> is gone. So how do I report the downloading progress to the others? By defining my own custom delegates? Wouldn’t it be nice to return an <em>iteration that others can listen to and receive the progress update events asynchronously</em>?</p>
<h2 id="async-await-adaptor">async await Adaptor</h2>
<p>Well, asynchronous iteration! This is certeinly a use case for <code class="language-plaintext highlighter-rouge">AsyncStream</code> but sometimes we may only be interested in the final download result. So I decided to define a specific type for my download operation and return that back.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">struct</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">progressSubjects</span> <span class="o">=</span> <span class="kt">CurrentValueSubject</span><span class="o">&lt;</span><span class="kt">Double</span><span class="p">,</span> <span class="kt">Never</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
  <span class="kd">private</span> <span class="k">let</span> <span class="nv">resultsSubjects</span> <span class="o">=</span> <span class="kt">PassthroughSubject</span><span class="o">&lt;</span><span class="kt">URL</span><span class="p">,</span> <span class="kt">Error</span><span class="o">&gt;</span><span class="p">()</span>

  <span class="k">var</span> <span class="nv">progressPublisher</span><span class="p">:</span> <span class="kt">AsyncThrowingPublisher</span><span class="o">&lt;</span><span class="kt">AnyPublisher</span><span class="o">&lt;</span><span class="kt">Double</span><span class="p">,</span> <span class="kt">Never</span><span class="o">&gt;&gt;</span> <span class="p">{</span>
    <span class="n">progressSubjects</span><span class="o">.</span><span class="nf">eraseToAnyPublisher</span><span class="p">()</span><span class="o">.</span><span class="n">values</span>
  <span class="p">}</span>
	
  <span class="kd">func</span> <span class="nf">result</span><span class="p">()</span> <span class="k">async</span> <span class="k">throws</span> <span class="o">-&gt;</span> <span class="kt">URL</span><span class="p">?</span> <span class="p">{</span>
    <span class="k">for</span> <span class="k">try</span> <span class="k">await</span> <span class="n">result</span> <span class="k">in</span> <span class="n">resultsSubjects</span><span class="o">.</span><span class="n">values</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">result</span>
    <span class="p">}</span>
    <span class="nf">preconditionFailure</span><span class="p">(</span><span class="s">"Should finish with at least one value"</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>I identified each download task with an ID and stored download tasks with their ids in a dictionary within my <code class="language-plaintext highlighter-rouge">DownloadManager</code>. For progress changes or download completions and failures I search for the corresponding download task in this dictionary and update it it to reflect those changes.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">typealias</span> <span class="kt">DownloadTaskID</span> <span class="o">=</span> <span class="kt">Int</span>

<span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">downloads</span><span class="p">:</span> <span class="p">[</span><span class="kt">DownloadTaskID</span><span class="p">:</span> <span class="kt">DownloadTask</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
	
  <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
    <span class="c1">//create a download task and store it and then start the task</span>
    <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="n">downloadSession</span><span class="o">.</span><span class="nf">downloadTask</span><span class="p">(</span><span class="nv">with</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="n">downloads</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DownloadTask</span><span class="p">()</span>
    <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">downloadTask</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>I used <code class="language-plaintext highlighter-rouge">Combine</code> subjects for progress and completion handlers, along with some helper methods for sending the correct events to those subjects.</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">extension</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
  <span class="kd">func</span> <span class="nf">finish</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">progressSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">completion</span><span class="p">:</span> <span class="o">.</span><span class="n">finished</span><span class="p">)</span>
    <span class="n">resultsSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="n">resultsSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">completion</span><span class="p">:</span> <span class="o">.</span><span class="n">finished</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">finish</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">progressSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">completion</span><span class="p">:</span> <span class="o">.</span><span class="n">finished</span><span class="p">)</span>
    <span class="n">resultsSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="nv">completion</span><span class="p">:</span> <span class="o">.</span><span class="nf">failure</span><span class="p">(</span><span class="n">error</span><span class="p">))</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">setProgress</span><span class="p">(</span><span class="n">_</span> <span class="nv">progress</span><span class="p">:</span> <span class="kt">Double</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">progressSubjects</span><span class="o">.</span><span class="nf">send</span><span class="p">(</span><span class="n">progress</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>Note that I didn’t expose any combine APIs externally, so the users of our class don’t have to import it. This makes it easier to use our code across multiple codebases.</p>

<p>Here is the implementation of our <code class="language-plaintext highlighter-rouge">DownloadManager</code> so far</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="kt">DownloadManager</span><span class="p">:</span> <span class="kt">NSObject</span><span class="p">,</span> <span class="kt">URLSessionDownloadDelegate</span> <span class="p">{</span>
  <span class="kd">private</span> <span class="k">var</span> <span class="nv">downloads</span><span class="p">:</span> <span class="p">[</span><span class="kt">DownloadTaskID</span><span class="p">:</span> <span class="kt">DownloadTask</span><span class="p">]</span> <span class="o">=</span> <span class="p">[:]</span>
	
  <span class="kd">func</span> <span class="nf">download</span><span class="p">(</span><span class="n">from</span> <span class="nv">url</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="kt">DownloadTask</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">task</span> <span class="o">=</span> <span class="n">downloadSession</span><span class="o">.</span><span class="nf">downloadTask</span><span class="p">(</span>
		<span class="nv">with</span><span class="p">:</span> <span class="kt">URLRequest</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">url</span><span class="p">))</span>
    <span class="n">downloads</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span> <span class="o">=</span> <span class="kt">DownloadTask</span><span class="p">()</span>
    <span class="n">task</span><span class="o">.</span><span class="nf">resume</span><span class="p">()</span>
    <span class="k">return</span> <span class="n">downloadTask</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didWriteData</span> <span class="nv">bytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesWritten</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">,</span> <span class="nv">totalBytesExpectedToWrite</span><span class="p">:</span> <span class="kt">Int64</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//find the download task and updqate the progress</span>
    <span class="k">let</span> <span class="nv">progress</span> <span class="o">=</span> <span class="kt">Double</span><span class="p">(</span><span class="n">totalBytesWritten</span><span class="p">)</span> <span class="o">/</span> <span class="kt">Doub</span>    <span class="p">(</span><span class="n">totalBytesExpectedToWrite</span><span class="p">)</span>
    <span class="k">let</span> <span class="nv">download</span> <span class="o">=</span> <span class="n">downloads</span><span class="p">[</span><span class="n">downloadTask</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span>
    <span class="n">download</span><span class="p">?</span><span class="o">.</span><span class="nf">setProgress</span><span class="p">(</span><span class="n">progress</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">downloadTask</span><span class="p">:</span> <span class="kt">URLSessionDownloadTask</span><span class="p">,</span> <span class="n">didFinishDownloadingTo</span> <span class="nv">location</span><span class="p">:</span> <span class="kt">URL</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//find the download task and finish it with success</span>
    <span class="k">let</span> <span class="nv">download</span> <span class="o">=</span> <span class="n">downloads</span><span class="p">[</span><span class="n">downloadTask</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span>
    <span class="k">let</span> <span class="nv">destLocation</span> <span class="o">=</span> <span class="k">try!</span> <span class="nf">moveToDownloads</span><span class="p">(</span><span class="nv">fileURL</span><span class="p">:</span> <span class="n">location</span><span class="p">)</span>
    <span class="n">download</span><span class="p">?</span><span class="o">.</span><span class="nf">finish</span><span class="p">(</span><span class="nv">url</span><span class="p">:</span> <span class="n">destLocation</span><span class="p">)</span>
    <span class="n">downloads</span><span class="o">.</span><span class="nf">removeValue</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="n">downloadTask</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">)</span>
  <span class="p">}</span>

  <span class="kd">func</span> <span class="nf">urlSession</span><span class="p">(</span><span class="n">_</span> <span class="nv">session</span><span class="p">:</span> <span class="kt">URLSession</span><span class="p">,</span> <span class="nv">task</span><span class="p">:</span> <span class="kt">URLSessionTask</span><span class="p">,</span> <span class="n">didCompleteWithError</span> <span class="nv">error</span><span class="p">:</span> <span class="kt">Error</span><span class="p">?)</span> <span class="p">{</span>
    <span class="c1">//find the download task and finish it with failure</span>
    <span class="k">let</span> <span class="nv">download</span> <span class="o">=</span> <span class="n">downloads</span><span class="p">[</span><span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">]</span>
    <span class="n">download</span><span class="p">?</span><span class="o">.</span><span class="nf">finish</span><span class="p">(</span><span class="nv">error</span><span class="p">:</span> <span class="n">error</span><span class="p">)</span>
    <span class="n">downloads</span><span class="o">.</span><span class="nf">removeValue</span><span class="p">(</span><span class="nv">forKey</span><span class="p">:</span> <span class="n">task</span><span class="o">.</span><span class="n">taskIdentifier</span><span class="p">)</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>And here is an example of its usage</p>
<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">downloadSomething</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">let</span> <span class="nv">downloadTask</span> <span class="o">=</span> <span class="n">fileDownloader</span><span class="o">.</span><span class="nf">download</span><span class="p">(</span><span class="nv">from</span><span class="p">:</span> <span class="n">somethingURL</span><span class="p">)</span>
  <span class="kt">Task</span> <span class="p">{</span>
    <span class="k">for</span> <span class="k">try</span> <span class="k">await</span> <span class="n">progress</span> <span class="k">in</span> <span class="n">downloadTask</span><span class="o">.</span><span class="n">progressPublisher</span> <span class="p">{</span>
      <span class="c1">//here you have the download progress</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="kt">Task</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">downloadedURL</span> <span class="o">=</span> <span class="k">try</span> <span class="k">await</span> <span class="n">downloadTask</span><span class="o">.</span><span class="nf">result</span><span class="p">()</span>
    <span class="c1">//here you have the download result</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<p>But we’re not finished yet! I will explain the rest of it in the two upcoming articles. In the next article I will explain how we can <strong>cancel and resume</strong> downloads.
If you’re bored with all of this implementation details and want to instantly jump and take a look at the final code, I’ve uploaded it on <a href="https://gist.github.com/shaysugg/8def3de858038eccf1ab2860424336e0">Gist</a>.</p>

<p>Thank you for reading,</p>

<p>Cheers!</p>]]></content><author><name>Shayan B</name></author><summary type="html"><![CDATA[Apparently URLSession used to be so difficult to work with. Many people preferred using third-party network tools like AFNetworking or Alamofire. However over the past years it has its improvements. Two of its notable improvements can be the Combine and async await equivalent APIs. They replace the closure based APIs which can become error prone in advance usages. After all, nobody wants to deal with those nested closures inside each others. Despite the improvements, I faced a few challenges while building a download manager class with a modern async await APIs in mind. Initially, I came up with something like this: ```swift struct DownloadManager { let downloadSession = URLSession.shared]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://shaysugg.github.io//assets/DownloadManager1.png" /><media:content medium="image" url="https://shaysugg.github.io//assets/DownloadManager1.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Just a hello world</title><link href="https://shaysugg.github.io//2024/04/04/HelloWorld.html" rel="alternate" type="text/html" title="Just a hello world" /><published>2024-04-04T00:00:00+03:30</published><updated>2024-04-04T00:00:00+03:30</updated><id>https://shaysugg.github.io//2024/04/04/HelloWorld</id><content type="html" xml:base="https://shaysugg.github.io//2024/04/04/HelloWorld.html"><![CDATA[<p>So here is the first post of this blog. Over the past few years I have had the opportunity to learn programming on my own which has led to woking in multiple startups and a big company. Well, I was quite busy with work all these times. Except doing some hobbies which were necessary to prevent burnouts I haven’t done much else.
During these times I’ve came across good blogs, RSS feeds and good dev communities. They have not only helped me learn and solve the problems I encounter at work and in my personal projects, but have also showed me how much developers are eager to share knowledge and collaborate with each other.</p>

<p>Additionally I realized there is a second group of developers to which I belong. The silent developers. We don’t share anything,  don’t contribute to any open-source projects and don’t answer any stack-overflow questions. Honestly there is nothing wrong about it. People are generally too busy with their daily life and knowledge sharing is usually time consuming. However, day by day as I spend more time in this field I come across interesting topics and ideas that I believe are worth sharing with other people.</p>

<p>I am aware of the fact that I’m probably not a good teacher or mentor. I don’t have much experience in software development (4 years?). I’m not even good at writing things and also english is not my first language. I don’t aim to create a well design and continuously updated tech blog, I simply need a place to comfortably write about interesting technical topics occasionally.
I will write about some of the things that I’ve crafted and built over the past years, mostly based on Swift and iOS development. Additionally I may write about my personal thoughts and opinions about technical topics.</p>

<p><em>Upcoming: An article about a small and modern <code class="language-plaintext highlighter-rouge">DownloadManager</code> based on <code class="language-plaintext highlighter-rouge">URLSession</code> that I developed last year and have actually used in several project.</em></p>]]></content><author><name>Shayan B</name></author><summary type="html"><![CDATA[So here is the first post of this blog. Over the past few years I have had the opportunity to learn programming on my own which has led to woking in multiple startups and a big company. Well, I was quite busy with work all these times. Except doing some hobbies which were necessary to prevent burnouts I haven’t done much else. During these times I’ve came across good blogs, RSS feeds and good dev communities. They have not only helped me learn and solve the problems I encounter at work and in my personal projects, but have also showed me how much developers are eager to share knowledge and collaborate with each other.]]></summary></entry></feed>